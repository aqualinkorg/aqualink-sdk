# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SurveyMediaSensorData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spotter': 'SurveyMediaSensorDataSpotter',
        'hobo': 'SurveyMediaSensorDataHobo',
        'noaa': 'SurveyMediaSensorDataNoaa'
    }

    attribute_map = {
        'spotter': 'spotter',
        'hobo': 'hobo',
        'noaa': 'noaa'
    }

    def __init__(self, spotter=None, hobo=None, noaa=None):  # noqa: E501
        """SurveyMediaSensorData - a model defined in Swagger"""  # noqa: E501
        self._spotter = None
        self._hobo = None
        self._noaa = None
        self.discriminator = None
        if spotter is not None:
            self.spotter = spotter
        if hobo is not None:
            self.hobo = hobo
        if noaa is not None:
            self.noaa = noaa

    @property
    def spotter(self):
        """Gets the spotter of this SurveyMediaSensorData.  # noqa: E501


        :return: The spotter of this SurveyMediaSensorData.  # noqa: E501
        :rtype: SurveyMediaSensorDataSpotter
        """
        return self._spotter

    @spotter.setter
    def spotter(self, spotter):
        """Sets the spotter of this SurveyMediaSensorData.


        :param spotter: The spotter of this SurveyMediaSensorData.  # noqa: E501
        :type: SurveyMediaSensorDataSpotter
        """

        self._spotter = spotter

    @property
    def hobo(self):
        """Gets the hobo of this SurveyMediaSensorData.  # noqa: E501


        :return: The hobo of this SurveyMediaSensorData.  # noqa: E501
        :rtype: SurveyMediaSensorDataHobo
        """
        return self._hobo

    @hobo.setter
    def hobo(self, hobo):
        """Sets the hobo of this SurveyMediaSensorData.


        :param hobo: The hobo of this SurveyMediaSensorData.  # noqa: E501
        :type: SurveyMediaSensorDataHobo
        """

        self._hobo = hobo

    @property
    def noaa(self):
        """Gets the noaa of this SurveyMediaSensorData.  # noqa: E501


        :return: The noaa of this SurveyMediaSensorData.  # noqa: E501
        :rtype: SurveyMediaSensorDataNoaa
        """
        return self._noaa

    @noaa.setter
    def noaa(self, noaa):
        """Sets the noaa of this SurveyMediaSensorData.


        :param noaa: The noaa of this SurveyMediaSensorData.  # noqa: E501
        :type: SurveyMediaSensorDataNoaa
        """

        self._noaa = noaa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SurveyMediaSensorData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveyMediaSensorData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
