# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SurveyMedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'url': 'str',
        'quality': 'float',
        'metadata': 'str',
        'comments': 'str',
        'sensor_data': 'SurveyMediaSensorData',
        'featured': 'bool',
        'hidden': 'bool',
        'observations': 'str',
        'survey_id': 'Survey',
        'type': 'str',
        'survey_point_id': 'float',
        'survey_point': 'AllOfSurveyMediaSurveyPoint',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'quality': 'quality',
        'metadata': 'metadata',
        'comments': 'comments',
        'sensor_data': 'sensorData',
        'featured': 'featured',
        'hidden': 'hidden',
        'observations': 'observations',
        'survey_id': 'surveyId',
        'type': 'type',
        'survey_point_id': 'surveyPointId',
        'survey_point': 'surveyPoint',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, url=None, quality=None, metadata=None, comments=None, sensor_data=None, featured=None, hidden=None, observations=None, survey_id=None, type=None, survey_point_id=None, survey_point=None, created_at=None, updated_at=None):  # noqa: E501
        """SurveyMedia - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._url = None
        self._quality = None
        self._metadata = None
        self._comments = None
        self._sensor_data = None
        self._featured = None
        self._hidden = None
        self._observations = None
        self._survey_id = None
        self._type = None
        self._survey_point_id = None
        self._survey_point = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.url = url
        self.quality = quality
        self.metadata = metadata
        self.comments = comments
        if sensor_data is not None:
            self.sensor_data = sensor_data
        self.featured = featured
        self.hidden = hidden
        self.observations = observations
        self.survey_id = survey_id
        self.type = type
        self.survey_point_id = survey_point_id
        self.survey_point = survey_point
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this SurveyMedia.  # noqa: E501


        :return: The id of this SurveyMedia.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SurveyMedia.


        :param id: The id of this SurveyMedia.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this SurveyMedia.  # noqa: E501


        :return: The url of this SurveyMedia.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SurveyMedia.


        :param url: The url of this SurveyMedia.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def quality(self):
        """Gets the quality of this SurveyMedia.  # noqa: E501


        :return: The quality of this SurveyMedia.  # noqa: E501
        :rtype: float
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this SurveyMedia.


        :param quality: The quality of this SurveyMedia.  # noqa: E501
        :type: float
        """
        if quality is None:
            raise ValueError("Invalid value for `quality`, must not be `None`")  # noqa: E501

        self._quality = quality

    @property
    def metadata(self):
        """Gets the metadata of this SurveyMedia.  # noqa: E501


        :return: The metadata of this SurveyMedia.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SurveyMedia.


        :param metadata: The metadata of this SurveyMedia.  # noqa: E501
        :type: str
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def comments(self):
        """Gets the comments of this SurveyMedia.  # noqa: E501


        :return: The comments of this SurveyMedia.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this SurveyMedia.


        :param comments: The comments of this SurveyMedia.  # noqa: E501
        :type: str
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")  # noqa: E501

        self._comments = comments

    @property
    def sensor_data(self):
        """Gets the sensor_data of this SurveyMedia.  # noqa: E501


        :return: The sensor_data of this SurveyMedia.  # noqa: E501
        :rtype: SurveyMediaSensorData
        """
        return self._sensor_data

    @sensor_data.setter
    def sensor_data(self, sensor_data):
        """Sets the sensor_data of this SurveyMedia.


        :param sensor_data: The sensor_data of this SurveyMedia.  # noqa: E501
        :type: SurveyMediaSensorData
        """

        self._sensor_data = sensor_data

    @property
    def featured(self):
        """Gets the featured of this SurveyMedia.  # noqa: E501


        :return: The featured of this SurveyMedia.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this SurveyMedia.


        :param featured: The featured of this SurveyMedia.  # noqa: E501
        :type: bool
        """
        if featured is None:
            raise ValueError("Invalid value for `featured`, must not be `None`")  # noqa: E501

        self._featured = featured

    @property
    def hidden(self):
        """Gets the hidden of this SurveyMedia.  # noqa: E501


        :return: The hidden of this SurveyMedia.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this SurveyMedia.


        :param hidden: The hidden of this SurveyMedia.  # noqa: E501
        :type: bool
        """
        if hidden is None:
            raise ValueError("Invalid value for `hidden`, must not be `None`")  # noqa: E501

        self._hidden = hidden

    @property
    def observations(self):
        """Gets the observations of this SurveyMedia.  # noqa: E501


        :return: The observations of this SurveyMedia.  # noqa: E501
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this SurveyMedia.


        :param observations: The observations of this SurveyMedia.  # noqa: E501
        :type: str
        """
        if observations is None:
            raise ValueError("Invalid value for `observations`, must not be `None`")  # noqa: E501
        allowed_values = ["anthropogenic", "environmental", "evident-disease", "healthy", "invasive-species", "mortality", "no-data", "possible-disease"]  # noqa: E501
        if observations not in allowed_values:
            raise ValueError(
                "Invalid value for `observations` ({0}), must be one of {1}"  # noqa: E501
                .format(observations, allowed_values)
            )

        self._observations = observations

    @property
    def survey_id(self):
        """Gets the survey_id of this SurveyMedia.  # noqa: E501


        :return: The survey_id of this SurveyMedia.  # noqa: E501
        :rtype: Survey
        """
        return self._survey_id

    @survey_id.setter
    def survey_id(self, survey_id):
        """Sets the survey_id of this SurveyMedia.


        :param survey_id: The survey_id of this SurveyMedia.  # noqa: E501
        :type: Survey
        """
        if survey_id is None:
            raise ValueError("Invalid value for `survey_id`, must not be `None`")  # noqa: E501

        self._survey_id = survey_id

    @property
    def type(self):
        """Gets the type of this SurveyMedia.  # noqa: E501


        :return: The type of this SurveyMedia.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SurveyMedia.


        :param type: The type of this SurveyMedia.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["video", "image"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def survey_point_id(self):
        """Gets the survey_point_id of this SurveyMedia.  # noqa: E501


        :return: The survey_point_id of this SurveyMedia.  # noqa: E501
        :rtype: float
        """
        return self._survey_point_id

    @survey_point_id.setter
    def survey_point_id(self, survey_point_id):
        """Sets the survey_point_id of this SurveyMedia.


        :param survey_point_id: The survey_point_id of this SurveyMedia.  # noqa: E501
        :type: float
        """
        if survey_point_id is None:
            raise ValueError("Invalid value for `survey_point_id`, must not be `None`")  # noqa: E501

        self._survey_point_id = survey_point_id

    @property
    def survey_point(self):
        """Gets the survey_point of this SurveyMedia.  # noqa: E501


        :return: The survey_point of this SurveyMedia.  # noqa: E501
        :rtype: AllOfSurveyMediaSurveyPoint
        """
        return self._survey_point

    @survey_point.setter
    def survey_point(self, survey_point):
        """Sets the survey_point of this SurveyMedia.


        :param survey_point: The survey_point of this SurveyMedia.  # noqa: E501
        :type: AllOfSurveyMediaSurveyPoint
        """
        if survey_point is None:
            raise ValueError("Invalid value for `survey_point`, must not be `None`")  # noqa: E501

        self._survey_point = survey_point

    @property
    def created_at(self):
        """Gets the created_at of this SurveyMedia.  # noqa: E501


        :return: The created_at of this SurveyMedia.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SurveyMedia.


        :param created_at: The created_at of this SurveyMedia.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SurveyMedia.  # noqa: E501


        :return: The updated_at of this SurveyMedia.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SurveyMedia.


        :param updated_at: The updated_at of this SurveyMedia.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SurveyMedia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveyMedia):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
