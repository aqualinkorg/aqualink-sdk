# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateCollectionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'user_id': 'float',
        'add_site_ids': 'list[float]',
        'remove_site_ids': 'list[float]',
        'is_public': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'user_id': 'userId',
        'add_site_ids': 'addSiteIds',
        'remove_site_ids': 'removeSiteIds',
        'is_public': 'isPublic'
    }

    def __init__(self, name=None, user_id=None, add_site_ids=None, remove_site_ids=None, is_public=None):  # noqa: E501
        """UpdateCollectionDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._user_id = None
        self._add_site_ids = None
        self._remove_site_ids = None
        self._is_public = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if add_site_ids is not None:
            self.add_site_ids = add_site_ids
        if remove_site_ids is not None:
            self.remove_site_ids = remove_site_ids
        if is_public is not None:
            self.is_public = is_public

    @property
    def name(self):
        """Gets the name of this UpdateCollectionDto.  # noqa: E501


        :return: The name of this UpdateCollectionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCollectionDto.


        :param name: The name of this UpdateCollectionDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this UpdateCollectionDto.  # noqa: E501


        :return: The user_id of this UpdateCollectionDto.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UpdateCollectionDto.


        :param user_id: The user_id of this UpdateCollectionDto.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    @property
    def add_site_ids(self):
        """Gets the add_site_ids of this UpdateCollectionDto.  # noqa: E501


        :return: The add_site_ids of this UpdateCollectionDto.  # noqa: E501
        :rtype: list[float]
        """
        return self._add_site_ids

    @add_site_ids.setter
    def add_site_ids(self, add_site_ids):
        """Sets the add_site_ids of this UpdateCollectionDto.


        :param add_site_ids: The add_site_ids of this UpdateCollectionDto.  # noqa: E501
        :type: list[float]
        """

        self._add_site_ids = add_site_ids

    @property
    def remove_site_ids(self):
        """Gets the remove_site_ids of this UpdateCollectionDto.  # noqa: E501


        :return: The remove_site_ids of this UpdateCollectionDto.  # noqa: E501
        :rtype: list[float]
        """
        return self._remove_site_ids

    @remove_site_ids.setter
    def remove_site_ids(self, remove_site_ids):
        """Sets the remove_site_ids of this UpdateCollectionDto.


        :param remove_site_ids: The remove_site_ids of this UpdateCollectionDto.  # noqa: E501
        :type: list[float]
        """

        self._remove_site_ids = remove_site_ids

    @property
    def is_public(self):
        """Gets the is_public of this UpdateCollectionDto.  # noqa: E501


        :return: The is_public of this UpdateCollectionDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this UpdateCollectionDto.


        :param is_public: The is_public of this UpdateCollectionDto.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCollectionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCollectionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
