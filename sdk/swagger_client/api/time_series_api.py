# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TimeSeriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def time_series_controller_find_site_data(self, site_id, metrics, start, end, hourly, **kwargs):  # noqa: E501
        """Returns specified time series data for a specified site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_find_site_data(site_id, metrics, start, end, hourly, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :param list[str] metrics: (required)
        :param str start: (required)
        :param str end: (required)
        :param bool hourly: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.time_series_controller_find_site_data_with_http_info(site_id, metrics, start, end, hourly, **kwargs)  # noqa: E501
        else:
            (data) = self.time_series_controller_find_site_data_with_http_info(site_id, metrics, start, end, hourly, **kwargs)  # noqa: E501
            return data

    def time_series_controller_find_site_data_with_http_info(self, site_id, metrics, start, end, hourly, **kwargs):  # noqa: E501
        """Returns specified time series data for a specified site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_find_site_data_with_http_info(site_id, metrics, start, end, hourly, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :param list[str] metrics: (required)
        :param str start: (required)
        :param str end: (required)
        :param bool hourly: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'metrics', 'start', 'end', 'hourly']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method time_series_controller_find_site_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `time_series_controller_find_site_data`")  # noqa: E501
        # verify the required parameter 'metrics' is set
        if ('metrics' not in params or
                params['metrics'] is None):
            raise ValueError("Missing the required parameter `metrics` when calling `time_series_controller_find_site_data`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `time_series_controller_find_site_data`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `time_series_controller_find_site_data`")  # noqa: E501
        # verify the required parameter 'hourly' is set
        if ('hourly' not in params or
                params['hourly'] is None):
            raise ValueError("Missing the required parameter `hourly` when calling `time_series_controller_find_site_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))  # noqa: E501
            collection_formats['metrics'] = 'multi'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'hourly' in params:
            query_params.append(('hourly', params['hourly']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/time-series/sites/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def time_series_controller_find_site_data_range(self, site_id, **kwargs):  # noqa: E501
        """Returns the range of the available time series data for a specified site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_find_site_data_range(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.time_series_controller_find_site_data_range_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.time_series_controller_find_site_data_range_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def time_series_controller_find_site_data_range_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Returns the range of the available time series data for a specified site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_find_site_data_range_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method time_series_controller_find_site_data_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `time_series_controller_find_site_data_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/time-series/sites/{siteId}/range', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def time_series_controller_find_survey_point_data(self, site_id, survey_point_id, metrics, start, end, hourly, **kwargs):  # noqa: E501
        """Returns specified time series data for a specified site point of interest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_find_survey_point_data(site_id, survey_point_id, metrics, start, end, hourly, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :param float survey_point_id: (required)
        :param list[str] metrics: (required)
        :param str start: (required)
        :param str end: (required)
        :param bool hourly: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.time_series_controller_find_survey_point_data_with_http_info(site_id, survey_point_id, metrics, start, end, hourly, **kwargs)  # noqa: E501
        else:
            (data) = self.time_series_controller_find_survey_point_data_with_http_info(site_id, survey_point_id, metrics, start, end, hourly, **kwargs)  # noqa: E501
            return data

    def time_series_controller_find_survey_point_data_with_http_info(self, site_id, survey_point_id, metrics, start, end, hourly, **kwargs):  # noqa: E501
        """Returns specified time series data for a specified site point of interest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_find_survey_point_data_with_http_info(site_id, survey_point_id, metrics, start, end, hourly, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :param float survey_point_id: (required)
        :param list[str] metrics: (required)
        :param str start: (required)
        :param str end: (required)
        :param bool hourly: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'survey_point_id', 'metrics', 'start', 'end', 'hourly']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method time_series_controller_find_survey_point_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `time_series_controller_find_survey_point_data`")  # noqa: E501
        # verify the required parameter 'survey_point_id' is set
        if ('survey_point_id' not in params or
                params['survey_point_id'] is None):
            raise ValueError("Missing the required parameter `survey_point_id` when calling `time_series_controller_find_survey_point_data`")  # noqa: E501
        # verify the required parameter 'metrics' is set
        if ('metrics' not in params or
                params['metrics'] is None):
            raise ValueError("Missing the required parameter `metrics` when calling `time_series_controller_find_survey_point_data`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `time_series_controller_find_survey_point_data`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `time_series_controller_find_survey_point_data`")  # noqa: E501
        # verify the required parameter 'hourly' is set
        if ('hourly' not in params or
                params['hourly'] is None):
            raise ValueError("Missing the required parameter `hourly` when calling `time_series_controller_find_survey_point_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'survey_point_id' in params:
            path_params['surveyPointId'] = params['survey_point_id']  # noqa: E501

        query_params = []
        if 'metrics' in params:
            query_params.append(('metrics', params['metrics']))  # noqa: E501
            collection_formats['metrics'] = 'multi'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'hourly' in params:
            query_params.append(('hourly', params['hourly']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/time-series/sites/{siteId}/site-survey-points/{surveyPointId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def time_series_controller_find_survey_point_data_range(self, site_id, survey_point_id, **kwargs):  # noqa: E501
        """Returns the range of the available time series data for a specified site point of interest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_find_survey_point_data_range(site_id, survey_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :param float survey_point_id: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.time_series_controller_find_survey_point_data_range_with_http_info(site_id, survey_point_id, **kwargs)  # noqa: E501
        else:
            (data) = self.time_series_controller_find_survey_point_data_range_with_http_info(site_id, survey_point_id, **kwargs)  # noqa: E501
            return data

    def time_series_controller_find_survey_point_data_range_with_http_info(self, site_id, survey_point_id, **kwargs):  # noqa: E501
        """Returns the range of the available time series data for a specified site point of interest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_find_survey_point_data_range_with_http_info(site_id, survey_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :param float survey_point_id: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'survey_point_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method time_series_controller_find_survey_point_data_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `time_series_controller_find_survey_point_data_range`")  # noqa: E501
        # verify the required parameter 'survey_point_id' is set
        if ('survey_point_id' not in params or
                params['survey_point_id'] is None):
            raise ValueError("Missing the required parameter `survey_point_id` when calling `time_series_controller_find_survey_point_data_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'survey_point_id' in params:
            path_params['surveyPointId'] = params['survey_point_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/time-series/sites/{siteId}/site-survey-points/{surveyPointId}/range', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def time_series_controller_upload_time_series_data(self, site_id, survey_point_id, fail_on_warning, **kwargs):  # noqa: E501
        """Upload time series data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_upload_time_series_data(site_id, survey_point_id, fail_on_warning, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :param float survey_point_id: (required)
        :param bool fail_on_warning: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.time_series_controller_upload_time_series_data_with_http_info(site_id, survey_point_id, fail_on_warning, **kwargs)  # noqa: E501
        else:
            (data) = self.time_series_controller_upload_time_series_data_with_http_info(site_id, survey_point_id, fail_on_warning, **kwargs)  # noqa: E501
            return data

    def time_series_controller_upload_time_series_data_with_http_info(self, site_id, survey_point_id, fail_on_warning, **kwargs):  # noqa: E501
        """Upload time series data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_series_controller_upload_time_series_data_with_http_info(site_id, survey_point_id, fail_on_warning, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float site_id: (required)
        :param float survey_point_id: (required)
        :param bool fail_on_warning: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'survey_point_id', 'fail_on_warning']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method time_series_controller_upload_time_series_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `time_series_controller_upload_time_series_data`")  # noqa: E501
        # verify the required parameter 'survey_point_id' is set
        if ('survey_point_id' not in params or
                params['survey_point_id'] is None):
            raise ValueError("Missing the required parameter `survey_point_id` when calling `time_series_controller_upload_time_series_data`")  # noqa: E501
        # verify the required parameter 'fail_on_warning' is set
        if ('fail_on_warning' not in params or
                params['fail_on_warning'] is None):
            raise ValueError("Missing the required parameter `fail_on_warning` when calling `time_series_controller_upload_time_series_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'survey_point_id' in params:
            path_params['surveyPointId'] = params['survey_point_id']  # noqa: E501

        query_params = []
        if 'fail_on_warning' in params:
            query_params.append(('failOnWarning', params['fail_on_warning']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/time-series/sites/{siteId}/site-survey-points/{surveyPointId}/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
