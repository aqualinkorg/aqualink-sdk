# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Survey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'temperature': 'float',
        'comments': 'str',
        'sensor_data': 'SurveyMediaSensorData',
        'weather_conditions': 'str',
        'dive_date': 'datetime',
        'user': 'User',
        'site_id': 'float',
        'site': 'Site',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'featured_survey_media': 'SurveyMedia',
        'survey_media': 'list[SurveyMedia]',
        'latest_daily_data': 'DailyData',
        'survey_points': 'list[SiteSurveyPoint]',
        'observations': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'temperature': 'temperature',
        'comments': 'comments',
        'sensor_data': 'sensorData',
        'weather_conditions': 'weatherConditions',
        'dive_date': 'diveDate',
        'user': 'user',
        'site_id': 'siteId',
        'site': 'site',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'featured_survey_media': 'featuredSurveyMedia',
        'survey_media': 'surveyMedia',
        'latest_daily_data': 'latestDailyData',
        'survey_points': 'surveyPoints',
        'observations': 'observations'
    }

    def __init__(self, id=None, temperature=None, comments=None, sensor_data=None, weather_conditions=None, dive_date=None, user=None, site_id=None, site=None, created_at=None, updated_at=None, featured_survey_media=None, survey_media=None, latest_daily_data=None, survey_points=None, observations=None):  # noqa: E501
        """Survey - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._temperature = None
        self._comments = None
        self._sensor_data = None
        self._weather_conditions = None
        self._dive_date = None
        self._user = None
        self._site_id = None
        self._site = None
        self._created_at = None
        self._updated_at = None
        self._featured_survey_media = None
        self._survey_media = None
        self._latest_daily_data = None
        self._survey_points = None
        self._observations = None
        self.discriminator = None
        self.id = id
        if temperature is not None:
            self.temperature = temperature
        if comments is not None:
            self.comments = comments
        if sensor_data is not None:
            self.sensor_data = sensor_data
        self.weather_conditions = weather_conditions
        self.dive_date = dive_date
        self.user = user
        self.site_id = site_id
        self.site = site
        self.created_at = created_at
        self.updated_at = updated_at
        if featured_survey_media is not None:
            self.featured_survey_media = featured_survey_media
        if survey_media is not None:
            self.survey_media = survey_media
        if latest_daily_data is not None:
            self.latest_daily_data = latest_daily_data
        if survey_points is not None:
            self.survey_points = survey_points
        if observations is not None:
            self.observations = observations

    @property
    def id(self):
        """Gets the id of this Survey.  # noqa: E501


        :return: The id of this Survey.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Survey.


        :param id: The id of this Survey.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def temperature(self):
        """Gets the temperature of this Survey.  # noqa: E501


        :return: The temperature of this Survey.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this Survey.


        :param temperature: The temperature of this Survey.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def comments(self):
        """Gets the comments of this Survey.  # noqa: E501


        :return: The comments of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Survey.


        :param comments: The comments of this Survey.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def sensor_data(self):
        """Gets the sensor_data of this Survey.  # noqa: E501


        :return: The sensor_data of this Survey.  # noqa: E501
        :rtype: SurveyMediaSensorData
        """
        return self._sensor_data

    @sensor_data.setter
    def sensor_data(self, sensor_data):
        """Sets the sensor_data of this Survey.


        :param sensor_data: The sensor_data of this Survey.  # noqa: E501
        :type: SurveyMediaSensorData
        """

        self._sensor_data = sensor_data

    @property
    def weather_conditions(self):
        """Gets the weather_conditions of this Survey.  # noqa: E501


        :return: The weather_conditions of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._weather_conditions

    @weather_conditions.setter
    def weather_conditions(self, weather_conditions):
        """Sets the weather_conditions of this Survey.


        :param weather_conditions: The weather_conditions of this Survey.  # noqa: E501
        :type: str
        """
        if weather_conditions is None:
            raise ValueError("Invalid value for `weather_conditions`, must not be `None`")  # noqa: E501
        allowed_values = ["calm", "waves", "storm", "no-data"]  # noqa: E501
        if weather_conditions not in allowed_values:
            raise ValueError(
                "Invalid value for `weather_conditions` ({0}), must be one of {1}"  # noqa: E501
                .format(weather_conditions, allowed_values)
            )

        self._weather_conditions = weather_conditions

    @property
    def dive_date(self):
        """Gets the dive_date of this Survey.  # noqa: E501


        :return: The dive_date of this Survey.  # noqa: E501
        :rtype: datetime
        """
        return self._dive_date

    @dive_date.setter
    def dive_date(self, dive_date):
        """Sets the dive_date of this Survey.


        :param dive_date: The dive_date of this Survey.  # noqa: E501
        :type: datetime
        """
        if dive_date is None:
            raise ValueError("Invalid value for `dive_date`, must not be `None`")  # noqa: E501

        self._dive_date = dive_date

    @property
    def user(self):
        """Gets the user of this Survey.  # noqa: E501


        :return: The user of this Survey.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Survey.


        :param user: The user of this Survey.  # noqa: E501
        :type: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def site_id(self):
        """Gets the site_id of this Survey.  # noqa: E501


        :return: The site_id of this Survey.  # noqa: E501
        :rtype: float
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Survey.


        :param site_id: The site_id of this Survey.  # noqa: E501
        :type: float
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def site(self):
        """Gets the site of this Survey.  # noqa: E501


        :return: The site of this Survey.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Survey.


        :param site: The site of this Survey.  # noqa: E501
        :type: Site
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def created_at(self):
        """Gets the created_at of this Survey.  # noqa: E501


        :return: The created_at of this Survey.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Survey.


        :param created_at: The created_at of this Survey.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Survey.  # noqa: E501


        :return: The updated_at of this Survey.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Survey.


        :param updated_at: The updated_at of this Survey.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def featured_survey_media(self):
        """Gets the featured_survey_media of this Survey.  # noqa: E501


        :return: The featured_survey_media of this Survey.  # noqa: E501
        :rtype: SurveyMedia
        """
        return self._featured_survey_media

    @featured_survey_media.setter
    def featured_survey_media(self, featured_survey_media):
        """Sets the featured_survey_media of this Survey.


        :param featured_survey_media: The featured_survey_media of this Survey.  # noqa: E501
        :type: SurveyMedia
        """

        self._featured_survey_media = featured_survey_media

    @property
    def survey_media(self):
        """Gets the survey_media of this Survey.  # noqa: E501


        :return: The survey_media of this Survey.  # noqa: E501
        :rtype: list[SurveyMedia]
        """
        return self._survey_media

    @survey_media.setter
    def survey_media(self, survey_media):
        """Sets the survey_media of this Survey.


        :param survey_media: The survey_media of this Survey.  # noqa: E501
        :type: list[SurveyMedia]
        """

        self._survey_media = survey_media

    @property
    def latest_daily_data(self):
        """Gets the latest_daily_data of this Survey.  # noqa: E501


        :return: The latest_daily_data of this Survey.  # noqa: E501
        :rtype: DailyData
        """
        return self._latest_daily_data

    @latest_daily_data.setter
    def latest_daily_data(self, latest_daily_data):
        """Sets the latest_daily_data of this Survey.


        :param latest_daily_data: The latest_daily_data of this Survey.  # noqa: E501
        :type: DailyData
        """

        self._latest_daily_data = latest_daily_data

    @property
    def survey_points(self):
        """Gets the survey_points of this Survey.  # noqa: E501


        :return: The survey_points of this Survey.  # noqa: E501
        :rtype: list[SiteSurveyPoint]
        """
        return self._survey_points

    @survey_points.setter
    def survey_points(self, survey_points):
        """Sets the survey_points of this Survey.


        :param survey_points: The survey_points of this Survey.  # noqa: E501
        :type: list[SiteSurveyPoint]
        """

        self._survey_points = survey_points

    @property
    def observations(self):
        """Gets the observations of this Survey.  # noqa: E501


        :return: The observations of this Survey.  # noqa: E501
        :rtype: list[str]
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this Survey.


        :param observations: The observations of this Survey.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["anthropogenic", "environmental", "evident-disease", "healthy", "invasive-species", "mortality", "no-data", "possible-disease"]  # noqa: E501
        if not set(observations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `observations` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(observations) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._observations = observations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Survey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Survey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
