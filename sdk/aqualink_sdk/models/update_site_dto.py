# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateSiteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'depth': 'float',
        'region_id': 'float',
        'admin_ids': 'list[float]',
        'stream_id': 'float',
        'coordinates': 'Coordinates',
        'video_stream': 'str'
    }

    attribute_map = {
        'name': 'name',
        'depth': 'depth',
        'region_id': 'regionId',
        'admin_ids': 'adminIds',
        'stream_id': 'streamId',
        'coordinates': 'coordinates',
        'video_stream': 'videoStream'
    }

    def __init__(self, name=None, depth=None, region_id=None, admin_ids=None, stream_id=None, coordinates=None, video_stream=None):  # noqa: E501
        """UpdateSiteDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._depth = None
        self._region_id = None
        self._admin_ids = None
        self._stream_id = None
        self._coordinates = None
        self._video_stream = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if depth is not None:
            self.depth = depth
        if region_id is not None:
            self.region_id = region_id
        if admin_ids is not None:
            self.admin_ids = admin_ids
        if stream_id is not None:
            self.stream_id = stream_id
        if coordinates is not None:
            self.coordinates = coordinates
        if video_stream is not None:
            self.video_stream = video_stream

    @property
    def name(self):
        """Gets the name of this UpdateSiteDto.  # noqa: E501


        :return: The name of this UpdateSiteDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSiteDto.


        :param name: The name of this UpdateSiteDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def depth(self):
        """Gets the depth of this UpdateSiteDto.  # noqa: E501


        :return: The depth of this UpdateSiteDto.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this UpdateSiteDto.


        :param depth: The depth of this UpdateSiteDto.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def region_id(self):
        """Gets the region_id of this UpdateSiteDto.  # noqa: E501


        :return: The region_id of this UpdateSiteDto.  # noqa: E501
        :rtype: float
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this UpdateSiteDto.


        :param region_id: The region_id of this UpdateSiteDto.  # noqa: E501
        :type: float
        """

        self._region_id = region_id

    @property
    def admin_ids(self):
        """Gets the admin_ids of this UpdateSiteDto.  # noqa: E501


        :return: The admin_ids of this UpdateSiteDto.  # noqa: E501
        :rtype: list[float]
        """
        return self._admin_ids

    @admin_ids.setter
    def admin_ids(self, admin_ids):
        """Sets the admin_ids of this UpdateSiteDto.


        :param admin_ids: The admin_ids of this UpdateSiteDto.  # noqa: E501
        :type: list[float]
        """

        self._admin_ids = admin_ids

    @property
    def stream_id(self):
        """Gets the stream_id of this UpdateSiteDto.  # noqa: E501


        :return: The stream_id of this UpdateSiteDto.  # noqa: E501
        :rtype: float
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this UpdateSiteDto.


        :param stream_id: The stream_id of this UpdateSiteDto.  # noqa: E501
        :type: float
        """

        self._stream_id = stream_id

    @property
    def coordinates(self):
        """Gets the coordinates of this UpdateSiteDto.  # noqa: E501


        :return: The coordinates of this UpdateSiteDto.  # noqa: E501
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this UpdateSiteDto.


        :param coordinates: The coordinates of this UpdateSiteDto.  # noqa: E501
        :type: Coordinates
        """

        self._coordinates = coordinates

    @property
    def video_stream(self):
        """Gets the video_stream of this UpdateSiteDto.  # noqa: E501


        :return: The video_stream of this UpdateSiteDto.  # noqa: E501
        :rtype: str
        """
        return self._video_stream

    @video_stream.setter
    def video_stream(self, video_stream):
        """Sets the video_stream of this UpdateSiteDto.


        :param video_stream: The video_stream of this UpdateSiteDto.  # noqa: E501
        :type: str
        """

        self._video_stream = video_stream

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSiteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSiteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
