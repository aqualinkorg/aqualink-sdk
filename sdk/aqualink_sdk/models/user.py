# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'full_name': 'str',
        'email': 'str',
        'organization': 'str',
        'location': 'RegionPolygon',
        'country': 'str',
        'description': 'str',
        'image_url': 'str',
        'admin_level': 'str',
        'administered_sites': 'list[Site]',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'full_name': 'fullName',
        'email': 'email',
        'organization': 'organization',
        'location': 'location',
        'country': 'country',
        'description': 'description',
        'image_url': 'imageUrl',
        'admin_level': 'adminLevel',
        'administered_sites': 'administeredSites',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, full_name=None, email=None, organization=None, location=None, country=None, description=None, image_url=None, admin_level=None, administered_sites=None, created_at=None, updated_at=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._full_name = None
        self._email = None
        self._organization = None
        self._location = None
        self._country = None
        self._description = None
        self._image_url = None
        self._admin_level = None
        self._administered_sites = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        if full_name is not None:
            self.full_name = full_name
        self.email = email
        self.organization = organization
        self.location = location
        self.country = country
        self.description = description
        self.image_url = image_url
        self.admin_level = admin_level
        self.administered_sites = administered_sites
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def full_name(self):
        """Gets the full_name of this User.  # noqa: E501


        :return: The full_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.


        :param full_name: The full_name of this User.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def organization(self):
        """Gets the organization of this User.  # noqa: E501


        :return: The organization of this User.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this User.


        :param organization: The organization of this User.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def location(self):
        """Gets the location of this User.  # noqa: E501


        :return: The location of this User.  # noqa: E501
        :rtype: RegionPolygon
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this User.


        :param location: The location of this User.  # noqa: E501
        :type: RegionPolygon
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def country(self):
        """Gets the country of this User.  # noqa: E501


        :return: The country of this User.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this User.


        :param country: The country of this User.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def description(self):
        """Gets the description of this User.  # noqa: E501


        :return: The description of this User.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this User.


        :param description: The description of this User.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def image_url(self):
        """Gets the image_url of this User.  # noqa: E501


        :return: The image_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this User.


        :param image_url: The image_url of this User.  # noqa: E501
        :type: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def admin_level(self):
        """Gets the admin_level of this User.  # noqa: E501


        :return: The admin_level of this User.  # noqa: E501
        :rtype: str
        """
        return self._admin_level

    @admin_level.setter
    def admin_level(self, admin_level):
        """Sets the admin_level of this User.


        :param admin_level: The admin_level of this User.  # noqa: E501
        :type: str
        """
        if admin_level is None:
            raise ValueError("Invalid value for `admin_level`, must not be `None`")  # noqa: E501
        allowed_values = ["default", "site_manager", "super_admin"]  # noqa: E501
        if admin_level not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_level` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_level, allowed_values)
            )

        self._admin_level = admin_level

    @property
    def administered_sites(self):
        """Gets the administered_sites of this User.  # noqa: E501


        :return: The administered_sites of this User.  # noqa: E501
        :rtype: list[Site]
        """
        return self._administered_sites

    @administered_sites.setter
    def administered_sites(self, administered_sites):
        """Sets the administered_sites of this User.


        :param administered_sites: The administered_sites of this User.  # noqa: E501
        :type: list[Site]
        """
        if administered_sites is None:
            raise ValueError("Invalid value for `administered_sites`, must not be `None`")  # noqa: E501

        self._administered_sites = administered_sites

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501


        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this User.  # noqa: E501


        :return: The updated_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
