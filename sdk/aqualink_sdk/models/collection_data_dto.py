# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollectionDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bottom_temperature': 'float',
        'top_temperature': 'float',
        'satellite_temperature': 'float',
        'dhw': 'float',
        'temp_alert': 'float',
        'temp_weekly_alert': 'float',
        'sst_anomaly': 'float',
        'significant_wave_height': 'float',
        'wave_mean_direction': 'float',
        'wave_mean_period': 'float',
        'wave_peak_period': 'float',
        'wind_direction': 'float',
        'wind_speed': 'float'
    }

    attribute_map = {
        'bottom_temperature': 'bottom_temperature',
        'top_temperature': 'top_temperature',
        'satellite_temperature': 'satellite_temperature',
        'dhw': 'dhw',
        'temp_alert': 'temp_alert',
        'temp_weekly_alert': 'temp_weekly_alert',
        'sst_anomaly': 'sst_anomaly',
        'significant_wave_height': 'significant_wave_height',
        'wave_mean_direction': 'wave_mean_direction',
        'wave_mean_period': 'wave_mean_period',
        'wave_peak_period': 'wave_peak_period',
        'wind_direction': 'wind_direction',
        'wind_speed': 'wind_speed'
    }

    def __init__(self, bottom_temperature=None, top_temperature=None, satellite_temperature=None, dhw=None, temp_alert=None, temp_weekly_alert=None, sst_anomaly=None, significant_wave_height=None, wave_mean_direction=None, wave_mean_period=None, wave_peak_period=None, wind_direction=None, wind_speed=None):  # noqa: E501
        """CollectionDataDto - a model defined in Swagger"""  # noqa: E501
        self._bottom_temperature = None
        self._top_temperature = None
        self._satellite_temperature = None
        self._dhw = None
        self._temp_alert = None
        self._temp_weekly_alert = None
        self._sst_anomaly = None
        self._significant_wave_height = None
        self._wave_mean_direction = None
        self._wave_mean_period = None
        self._wave_peak_period = None
        self._wind_direction = None
        self._wind_speed = None
        self.discriminator = None
        self.bottom_temperature = bottom_temperature
        self.top_temperature = top_temperature
        self.satellite_temperature = satellite_temperature
        self.dhw = dhw
        self.temp_alert = temp_alert
        self.temp_weekly_alert = temp_weekly_alert
        self.sst_anomaly = sst_anomaly
        self.significant_wave_height = significant_wave_height
        self.wave_mean_direction = wave_mean_direction
        self.wave_mean_period = wave_mean_period
        self.wave_peak_period = wave_peak_period
        self.wind_direction = wind_direction
        self.wind_speed = wind_speed

    @property
    def bottom_temperature(self):
        """Gets the bottom_temperature of this CollectionDataDto.  # noqa: E501


        :return: The bottom_temperature of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._bottom_temperature

    @bottom_temperature.setter
    def bottom_temperature(self, bottom_temperature):
        """Sets the bottom_temperature of this CollectionDataDto.


        :param bottom_temperature: The bottom_temperature of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._bottom_temperature = bottom_temperature

    @property
    def top_temperature(self):
        """Gets the top_temperature of this CollectionDataDto.  # noqa: E501


        :return: The top_temperature of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._top_temperature

    @top_temperature.setter
    def top_temperature(self, top_temperature):
        """Sets the top_temperature of this CollectionDataDto.


        :param top_temperature: The top_temperature of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._top_temperature = top_temperature

    @property
    def satellite_temperature(self):
        """Gets the satellite_temperature of this CollectionDataDto.  # noqa: E501


        :return: The satellite_temperature of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._satellite_temperature

    @satellite_temperature.setter
    def satellite_temperature(self, satellite_temperature):
        """Sets the satellite_temperature of this CollectionDataDto.


        :param satellite_temperature: The satellite_temperature of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._satellite_temperature = satellite_temperature

    @property
    def dhw(self):
        """Gets the dhw of this CollectionDataDto.  # noqa: E501


        :return: The dhw of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._dhw

    @dhw.setter
    def dhw(self, dhw):
        """Sets the dhw of this CollectionDataDto.


        :param dhw: The dhw of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._dhw = dhw

    @property
    def temp_alert(self):
        """Gets the temp_alert of this CollectionDataDto.  # noqa: E501


        :return: The temp_alert of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._temp_alert

    @temp_alert.setter
    def temp_alert(self, temp_alert):
        """Sets the temp_alert of this CollectionDataDto.


        :param temp_alert: The temp_alert of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._temp_alert = temp_alert

    @property
    def temp_weekly_alert(self):
        """Gets the temp_weekly_alert of this CollectionDataDto.  # noqa: E501


        :return: The temp_weekly_alert of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._temp_weekly_alert

    @temp_weekly_alert.setter
    def temp_weekly_alert(self, temp_weekly_alert):
        """Sets the temp_weekly_alert of this CollectionDataDto.


        :param temp_weekly_alert: The temp_weekly_alert of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._temp_weekly_alert = temp_weekly_alert

    @property
    def sst_anomaly(self):
        """Gets the sst_anomaly of this CollectionDataDto.  # noqa: E501


        :return: The sst_anomaly of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._sst_anomaly

    @sst_anomaly.setter
    def sst_anomaly(self, sst_anomaly):
        """Sets the sst_anomaly of this CollectionDataDto.


        :param sst_anomaly: The sst_anomaly of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._sst_anomaly = sst_anomaly

    @property
    def significant_wave_height(self):
        """Gets the significant_wave_height of this CollectionDataDto.  # noqa: E501


        :return: The significant_wave_height of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._significant_wave_height

    @significant_wave_height.setter
    def significant_wave_height(self, significant_wave_height):
        """Sets the significant_wave_height of this CollectionDataDto.


        :param significant_wave_height: The significant_wave_height of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._significant_wave_height = significant_wave_height

    @property
    def wave_mean_direction(self):
        """Gets the wave_mean_direction of this CollectionDataDto.  # noqa: E501


        :return: The wave_mean_direction of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._wave_mean_direction

    @wave_mean_direction.setter
    def wave_mean_direction(self, wave_mean_direction):
        """Sets the wave_mean_direction of this CollectionDataDto.


        :param wave_mean_direction: The wave_mean_direction of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._wave_mean_direction = wave_mean_direction

    @property
    def wave_mean_period(self):
        """Gets the wave_mean_period of this CollectionDataDto.  # noqa: E501


        :return: The wave_mean_period of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._wave_mean_period

    @wave_mean_period.setter
    def wave_mean_period(self, wave_mean_period):
        """Sets the wave_mean_period of this CollectionDataDto.


        :param wave_mean_period: The wave_mean_period of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._wave_mean_period = wave_mean_period

    @property
    def wave_peak_period(self):
        """Gets the wave_peak_period of this CollectionDataDto.  # noqa: E501


        :return: The wave_peak_period of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._wave_peak_period

    @wave_peak_period.setter
    def wave_peak_period(self, wave_peak_period):
        """Sets the wave_peak_period of this CollectionDataDto.


        :param wave_peak_period: The wave_peak_period of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._wave_peak_period = wave_peak_period

    @property
    def wind_direction(self):
        """Gets the wind_direction of this CollectionDataDto.  # noqa: E501


        :return: The wind_direction of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._wind_direction

    @wind_direction.setter
    def wind_direction(self, wind_direction):
        """Sets the wind_direction of this CollectionDataDto.


        :param wind_direction: The wind_direction of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._wind_direction = wind_direction

    @property
    def wind_speed(self):
        """Gets the wind_speed of this CollectionDataDto.  # noqa: E501


        :return: The wind_speed of this CollectionDataDto.  # noqa: E501
        :rtype: float
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this CollectionDataDto.


        :param wind_speed: The wind_speed of this CollectionDataDto.  # noqa: E501
        :type: float
        """
        self._wind_speed = wind_speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionDataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
