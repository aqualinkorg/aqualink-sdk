# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SofarLiveDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site': 'SofarLiveDataDtoSite',
        'latest_data': 'list[LatestData]',
        'daily_alert_level': 'float',
        'weekly_alert_level': 'float',
        'bottom_temperature': 'TimeSeriesValueDto',
        'top_temperature': 'TimeSeriesValueDto',
        'satellite_temperature': 'TimeSeriesValueDto',
        'degree_heating_days': 'TimeSeriesValueDto',
        'wave_height': 'TimeSeriesValueDto',
        'wave_mean_direction': 'TimeSeriesValueDto',
        'wave_mean_period': 'TimeSeriesValueDto',
        'wind_speed': 'TimeSeriesValueDto',
        'wind_direction': 'TimeSeriesValueDto',
        'sst_anomaly': 'float',
        'spotter_position': 'SofarLiveDataDtoSpotterPosition'
    }

    attribute_map = {
        'site': 'site',
        'latest_data': 'latestData',
        'daily_alert_level': 'dailyAlertLevel',
        'weekly_alert_level': 'weeklyAlertLevel',
        'bottom_temperature': 'bottomTemperature',
        'top_temperature': 'topTemperature',
        'satellite_temperature': 'satelliteTemperature',
        'degree_heating_days': 'degreeHeatingDays',
        'wave_height': 'waveHeight',
        'wave_mean_direction': 'waveMeanDirection',
        'wave_mean_period': 'waveMeanPeriod',
        'wind_speed': 'windSpeed',
        'wind_direction': 'windDirection',
        'sst_anomaly': 'sstAnomaly',
        'spotter_position': 'spotterPosition'
    }

    def __init__(self, site=None, latest_data=None, daily_alert_level=None, weekly_alert_level=None, bottom_temperature=None, top_temperature=None, satellite_temperature=None, degree_heating_days=None, wave_height=None, wave_mean_direction=None, wave_mean_period=None, wind_speed=None, wind_direction=None, sst_anomaly=None, spotter_position=None):  # noqa: E501
        """SofarLiveDataDto - a model defined in Swagger"""  # noqa: E501
        self._site = None
        self._latest_data = None
        self._daily_alert_level = None
        self._weekly_alert_level = None
        self._bottom_temperature = None
        self._top_temperature = None
        self._satellite_temperature = None
        self._degree_heating_days = None
        self._wave_height = None
        self._wave_mean_direction = None
        self._wave_mean_period = None
        self._wind_speed = None
        self._wind_direction = None
        self._sst_anomaly = None
        self._spotter_position = None
        self.discriminator = None
        self.site = site
        if latest_data is not None:
            self.latest_data = latest_data
        if daily_alert_level is not None:
            self.daily_alert_level = daily_alert_level
        if weekly_alert_level is not None:
            self.weekly_alert_level = weekly_alert_level
        if bottom_temperature is not None:
            self.bottom_temperature = bottom_temperature
        if top_temperature is not None:
            self.top_temperature = top_temperature
        if satellite_temperature is not None:
            self.satellite_temperature = satellite_temperature
        if degree_heating_days is not None:
            self.degree_heating_days = degree_heating_days
        if wave_height is not None:
            self.wave_height = wave_height
        if wave_mean_direction is not None:
            self.wave_mean_direction = wave_mean_direction
        if wave_mean_period is not None:
            self.wave_mean_period = wave_mean_period
        if wind_speed is not None:
            self.wind_speed = wind_speed
        if wind_direction is not None:
            self.wind_direction = wind_direction
        if sst_anomaly is not None:
            self.sst_anomaly = sst_anomaly
        self.spotter_position = spotter_position

    @property
    def site(self):
        """Gets the site of this SofarLiveDataDto.  # noqa: E501


        :return: The site of this SofarLiveDataDto.  # noqa: E501
        :rtype: SofarLiveDataDtoSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this SofarLiveDataDto.


        :param site: The site of this SofarLiveDataDto.  # noqa: E501
        :type: SofarLiveDataDtoSite
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def latest_data(self):
        """Gets the latest_data of this SofarLiveDataDto.  # noqa: E501


        :return: The latest_data of this SofarLiveDataDto.  # noqa: E501
        :rtype: list[LatestData]
        """
        return self._latest_data

    @latest_data.setter
    def latest_data(self, latest_data):
        """Sets the latest_data of this SofarLiveDataDto.


        :param latest_data: The latest_data of this SofarLiveDataDto.  # noqa: E501
        :type: list[LatestData]
        """

        self._latest_data = latest_data

    @property
    def daily_alert_level(self):
        """Gets the daily_alert_level of this SofarLiveDataDto.  # noqa: E501


        :return: The daily_alert_level of this SofarLiveDataDto.  # noqa: E501
        :rtype: float
        """
        return self._daily_alert_level

    @daily_alert_level.setter
    def daily_alert_level(self, daily_alert_level):
        """Sets the daily_alert_level of this SofarLiveDataDto.


        :param daily_alert_level: The daily_alert_level of this SofarLiveDataDto.  # noqa: E501
        :type: float
        """

        self._daily_alert_level = daily_alert_level

    @property
    def weekly_alert_level(self):
        """Gets the weekly_alert_level of this SofarLiveDataDto.  # noqa: E501


        :return: The weekly_alert_level of this SofarLiveDataDto.  # noqa: E501
        :rtype: float
        """
        return self._weekly_alert_level

    @weekly_alert_level.setter
    def weekly_alert_level(self, weekly_alert_level):
        """Sets the weekly_alert_level of this SofarLiveDataDto.


        :param weekly_alert_level: The weekly_alert_level of this SofarLiveDataDto.  # noqa: E501
        :type: float
        """

        self._weekly_alert_level = weekly_alert_level

    @property
    def bottom_temperature(self):
        """Gets the bottom_temperature of this SofarLiveDataDto.  # noqa: E501


        :return: The bottom_temperature of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._bottom_temperature

    @bottom_temperature.setter
    def bottom_temperature(self, bottom_temperature):
        """Sets the bottom_temperature of this SofarLiveDataDto.


        :param bottom_temperature: The bottom_temperature of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._bottom_temperature = bottom_temperature

    @property
    def top_temperature(self):
        """Gets the top_temperature of this SofarLiveDataDto.  # noqa: E501


        :return: The top_temperature of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._top_temperature

    @top_temperature.setter
    def top_temperature(self, top_temperature):
        """Sets the top_temperature of this SofarLiveDataDto.


        :param top_temperature: The top_temperature of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._top_temperature = top_temperature

    @property
    def satellite_temperature(self):
        """Gets the satellite_temperature of this SofarLiveDataDto.  # noqa: E501


        :return: The satellite_temperature of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._satellite_temperature

    @satellite_temperature.setter
    def satellite_temperature(self, satellite_temperature):
        """Sets the satellite_temperature of this SofarLiveDataDto.


        :param satellite_temperature: The satellite_temperature of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._satellite_temperature = satellite_temperature

    @property
    def degree_heating_days(self):
        """Gets the degree_heating_days of this SofarLiveDataDto.  # noqa: E501


        :return: The degree_heating_days of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._degree_heating_days

    @degree_heating_days.setter
    def degree_heating_days(self, degree_heating_days):
        """Sets the degree_heating_days of this SofarLiveDataDto.


        :param degree_heating_days: The degree_heating_days of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._degree_heating_days = degree_heating_days

    @property
    def wave_height(self):
        """Gets the wave_height of this SofarLiveDataDto.  # noqa: E501


        :return: The wave_height of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._wave_height

    @wave_height.setter
    def wave_height(self, wave_height):
        """Sets the wave_height of this SofarLiveDataDto.


        :param wave_height: The wave_height of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._wave_height = wave_height

    @property
    def wave_mean_direction(self):
        """Gets the wave_mean_direction of this SofarLiveDataDto.  # noqa: E501


        :return: The wave_mean_direction of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._wave_mean_direction

    @wave_mean_direction.setter
    def wave_mean_direction(self, wave_mean_direction):
        """Sets the wave_mean_direction of this SofarLiveDataDto.


        :param wave_mean_direction: The wave_mean_direction of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._wave_mean_direction = wave_mean_direction

    @property
    def wave_mean_period(self):
        """Gets the wave_mean_period of this SofarLiveDataDto.  # noqa: E501


        :return: The wave_mean_period of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._wave_mean_period

    @wave_mean_period.setter
    def wave_mean_period(self, wave_mean_period):
        """Sets the wave_mean_period of this SofarLiveDataDto.


        :param wave_mean_period: The wave_mean_period of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._wave_mean_period = wave_mean_period

    @property
    def wind_speed(self):
        """Gets the wind_speed of this SofarLiveDataDto.  # noqa: E501


        :return: The wind_speed of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this SofarLiveDataDto.


        :param wind_speed: The wind_speed of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._wind_speed = wind_speed

    @property
    def wind_direction(self):
        """Gets the wind_direction of this SofarLiveDataDto.  # noqa: E501


        :return: The wind_direction of this SofarLiveDataDto.  # noqa: E501
        :rtype: TimeSeriesValueDto
        """
        return self._wind_direction

    @wind_direction.setter
    def wind_direction(self, wind_direction):
        """Sets the wind_direction of this SofarLiveDataDto.


        :param wind_direction: The wind_direction of this SofarLiveDataDto.  # noqa: E501
        :type: TimeSeriesValueDto
        """

        self._wind_direction = wind_direction

    @property
    def sst_anomaly(self):
        """Gets the sst_anomaly of this SofarLiveDataDto.  # noqa: E501


        :return: The sst_anomaly of this SofarLiveDataDto.  # noqa: E501
        :rtype: float
        """
        return self._sst_anomaly

    @sst_anomaly.setter
    def sst_anomaly(self, sst_anomaly):
        """Sets the sst_anomaly of this SofarLiveDataDto.


        :param sst_anomaly: The sst_anomaly of this SofarLiveDataDto.  # noqa: E501
        :type: float
        """

        self._sst_anomaly = sst_anomaly

    @property
    def spotter_position(self):
        """Gets the spotter_position of this SofarLiveDataDto.  # noqa: E501


        :return: The spotter_position of this SofarLiveDataDto.  # noqa: E501
        :rtype: SofarLiveDataDtoSpotterPosition
        """
        return self._spotter_position

    @spotter_position.setter
    def spotter_position(self, spotter_position):
        """Sets the spotter_position of this SofarLiveDataDto.


        :param spotter_position: The spotter_position of this SofarLiveDataDto.  # noqa: E501
        :type: SofarLiveDataDtoSpotterPosition
        """
        if spotter_position is None:
            raise ValueError("Invalid value for `spotter_position`, must not be `None`")  # noqa: E501

        self._spotter_position = spotter_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SofarLiveDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SofarLiveDataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
