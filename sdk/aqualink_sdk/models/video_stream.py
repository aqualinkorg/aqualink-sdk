# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoStream(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'owner_email': 'str',
        'url': 'str',
        'location': 'object',
        'quality': 'float',
        'important': 'bool',
        'hidden': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'owner_email': 'ownerEmail',
        'url': 'url',
        'location': 'location',
        'quality': 'quality',
        'important': 'important',
        'hidden': 'hidden',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, owner_email=None, url=None, location=None, quality=None, important=None, hidden=None, created_at=None, updated_at=None):  # noqa: E501
        """VideoStream - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._owner_email = None
        self._url = None
        self._location = None
        self._quality = None
        self._important = None
        self._hidden = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.owner_email = owner_email
        self.url = url
        self.location = location
        self.quality = quality
        self.important = important
        self.hidden = hidden
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this VideoStream.  # noqa: E501


        :return: The id of this VideoStream.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VideoStream.


        :param id: The id of this VideoStream.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def owner_email(self):
        """Gets the owner_email of this VideoStream.  # noqa: E501


        :return: The owner_email of this VideoStream.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this VideoStream.


        :param owner_email: The owner_email of this VideoStream.  # noqa: E501
        :type: str
        """
        if owner_email is None:
            raise ValueError("Invalid value for `owner_email`, must not be `None`")  # noqa: E501

        self._owner_email = owner_email

    @property
    def url(self):
        """Gets the url of this VideoStream.  # noqa: E501


        :return: The url of this VideoStream.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VideoStream.


        :param url: The url of this VideoStream.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def location(self):
        """Gets the location of this VideoStream.  # noqa: E501


        :return: The location of this VideoStream.  # noqa: E501
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VideoStream.


        :param location: The location of this VideoStream.  # noqa: E501
        :type: object
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def quality(self):
        """Gets the quality of this VideoStream.  # noqa: E501


        :return: The quality of this VideoStream.  # noqa: E501
        :rtype: float
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this VideoStream.


        :param quality: The quality of this VideoStream.  # noqa: E501
        :type: float
        """
        if quality is None:
            raise ValueError("Invalid value for `quality`, must not be `None`")  # noqa: E501

        self._quality = quality

    @property
    def important(self):
        """Gets the important of this VideoStream.  # noqa: E501


        :return: The important of this VideoStream.  # noqa: E501
        :rtype: bool
        """
        return self._important

    @important.setter
    def important(self, important):
        """Sets the important of this VideoStream.


        :param important: The important of this VideoStream.  # noqa: E501
        :type: bool
        """
        if important is None:
            raise ValueError("Invalid value for `important`, must not be `None`")  # noqa: E501

        self._important = important

    @property
    def hidden(self):
        """Gets the hidden of this VideoStream.  # noqa: E501


        :return: The hidden of this VideoStream.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this VideoStream.


        :param hidden: The hidden of this VideoStream.  # noqa: E501
        :type: bool
        """
        if hidden is None:
            raise ValueError("Invalid value for `hidden`, must not be `None`")  # noqa: E501

        self._hidden = hidden

    @property
    def created_at(self):
        """Gets the created_at of this VideoStream.  # noqa: E501


        :return: The created_at of this VideoStream.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VideoStream.


        :param created_at: The created_at of this VideoStream.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VideoStream.  # noqa: E501


        :return: The updated_at of this VideoStream.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VideoStream.


        :param updated_at: The updated_at of this VideoStream.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoStream, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoStream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
