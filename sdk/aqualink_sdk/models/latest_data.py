# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LatestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'value': 'float',
        'site_id': 'float',
        'timestamp': 'datetime',
        'site': 'Site',
        'survey_point': 'AllOfLatestDataSurveyPoint',
        'source': 'str',
        'metric': 'str'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'site_id': 'siteId',
        'timestamp': 'timestamp',
        'site': 'site',
        'survey_point': 'surveyPoint',
        'source': 'source',
        'metric': 'metric'
    }

    def __init__(self, id=None, value=None, site_id=None, timestamp=None, site=None, survey_point=None, source=None, metric=None):  # noqa: E501
        """LatestData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._value = None
        self._site_id = None
        self._timestamp = None
        self._site = None
        self._survey_point = None
        self._source = None
        self._metric = None
        self.discriminator = None
        self.id = id
        self.value = value
        self.site_id = site_id
        self.timestamp = timestamp
        self.site = site
        self.survey_point = survey_point
        self.source = source
        self.metric = metric

    @property
    def id(self):
        """Gets the id of this LatestData.  # noqa: E501


        :return: The id of this LatestData.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LatestData.


        :param id: The id of this LatestData.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this LatestData.  # noqa: E501


        :return: The value of this LatestData.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LatestData.


        :param value: The value of this LatestData.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def site_id(self):
        """Gets the site_id of this LatestData.  # noqa: E501


        :return: The site_id of this LatestData.  # noqa: E501
        :rtype: float
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this LatestData.


        :param site_id: The site_id of this LatestData.  # noqa: E501
        :type: float
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def timestamp(self):
        """Gets the timestamp of this LatestData.  # noqa: E501


        :return: The timestamp of this LatestData.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LatestData.


        :param timestamp: The timestamp of this LatestData.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def site(self):
        """Gets the site of this LatestData.  # noqa: E501


        :return: The site of this LatestData.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this LatestData.


        :param site: The site of this LatestData.  # noqa: E501
        :type: Site
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def survey_point(self):
        """Gets the survey_point of this LatestData.  # noqa: E501


        :return: The survey_point of this LatestData.  # noqa: E501
        :rtype: AllOfLatestDataSurveyPoint
        """
        return self._survey_point

    @survey_point.setter
    def survey_point(self, survey_point):
        """Sets the survey_point of this LatestData.


        :param survey_point: The survey_point of this LatestData.  # noqa: E501
        :type: AllOfLatestDataSurveyPoint
        """
        if survey_point is None:
            raise ValueError("Invalid value for `survey_point`, must not be `None`")  # noqa: E501

        self._survey_point = survey_point

    @property
    def source(self):
        """Gets the source of this LatestData.  # noqa: E501


        :return: The source of this LatestData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LatestData.


        :param source: The source of this LatestData.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        allowed_values = ["gfs", "hobo", "noaa", "spotter", "sonde", "metlog"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def metric(self):
        """Gets the metric of this LatestData.  # noqa: E501


        :return: The metric of this LatestData.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this LatestData.


        :param metric: The metric of this LatestData.  # noqa: E501
        :type: str
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501
        allowed_values = ["temp_alert", "temp_weekly_alert", "dhw", "satellite_temperature", "air_temperature", "top_temperature", "bottom_temperature", "sst_anomaly", "significant_wave_height", "wave_mean_period", "wave_peak_period", "wave_mean_direction", "wind_speed", "wind_direction", "cholorophyll_rfu", "cholorophyll_concentration", "conductivity", "water_depth", "odo_saturation", "odo_concentration", "salinity", "specific_conductance", "tds", "turbidity", "total_suspended_solids", "sonde_wiper_position", "ph", "ph_mv", "sonde_battery_voltage", "sonde_cable_power_voltage", "pressure", "precipitation", "rh", "wind_gust_speed"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"  # noqa: E501
                .format(metric, allowed_values)
            )

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LatestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LatestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
