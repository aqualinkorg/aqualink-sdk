# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataUploads(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'site': 'Site',
        'survey_point': 'SiteSurveyPoint',
        'sensor_type': 'str',
        'file': 'str',
        'signature': 'str',
        'min_date': 'datetime',
        'max_date': 'datetime',
        'metrics': 'list[str]',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'site': 'site',
        'survey_point': 'surveyPoint',
        'sensor_type': 'sensorType',
        'file': 'file',
        'signature': 'signature',
        'min_date': 'minDate',
        'max_date': 'maxDate',
        'metrics': 'metrics',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, site=None, survey_point=None, sensor_type=None, file=None, signature=None, min_date=None, max_date=None, metrics=None, created_at=None, updated_at=None):  # noqa: E501
        """DataUploads - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._site = None
        self._survey_point = None
        self._sensor_type = None
        self._file = None
        self._signature = None
        self._min_date = None
        self._max_date = None
        self._metrics = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.site = site
        self.survey_point = survey_point
        self.sensor_type = sensor_type
        self.file = file
        self.signature = signature
        self.min_date = min_date
        self.max_date = max_date
        self.metrics = metrics
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this DataUploads.  # noqa: E501


        :return: The id of this DataUploads.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataUploads.


        :param id: The id of this DataUploads.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def site(self):
        """Gets the site of this DataUploads.  # noqa: E501


        :return: The site of this DataUploads.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this DataUploads.


        :param site: The site of this DataUploads.  # noqa: E501
        :type: Site
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def survey_point(self):
        """Gets the survey_point of this DataUploads.  # noqa: E501


        :return: The survey_point of this DataUploads.  # noqa: E501
        :rtype: SiteSurveyPoint
        """
        return self._survey_point

    @survey_point.setter
    def survey_point(self, survey_point):
        """Sets the survey_point of this DataUploads.


        :param survey_point: The survey_point of this DataUploads.  # noqa: E501
        :type: SiteSurveyPoint
        """
        if survey_point is None:
            raise ValueError("Invalid value for `survey_point`, must not be `None`")  # noqa: E501

        self._survey_point = survey_point

    @property
    def sensor_type(self):
        """Gets the sensor_type of this DataUploads.  # noqa: E501


        :return: The sensor_type of this DataUploads.  # noqa: E501
        :rtype: str
        """
        return self._sensor_type

    @sensor_type.setter
    def sensor_type(self, sensor_type):
        """Sets the sensor_type of this DataUploads.


        :param sensor_type: The sensor_type of this DataUploads.  # noqa: E501
        :type: str
        """
        if sensor_type is None:
            raise ValueError("Invalid value for `sensor_type`, must not be `None`")  # noqa: E501
        allowed_values = ["gfs", "hobo", "noaa", "spotter", "sonde"]  # noqa: E501
        if sensor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sensor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sensor_type, allowed_values)
            )

        self._sensor_type = sensor_type

    @property
    def file(self):
        """Gets the file of this DataUploads.  # noqa: E501


        :return: The file of this DataUploads.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DataUploads.


        :param file: The file of this DataUploads.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def signature(self):
        """Gets the signature of this DataUploads.  # noqa: E501


        :return: The signature of this DataUploads.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this DataUploads.


        :param signature: The signature of this DataUploads.  # noqa: E501
        :type: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    @property
    def min_date(self):
        """Gets the min_date of this DataUploads.  # noqa: E501


        :return: The min_date of this DataUploads.  # noqa: E501
        :rtype: datetime
        """
        return self._min_date

    @min_date.setter
    def min_date(self, min_date):
        """Sets the min_date of this DataUploads.


        :param min_date: The min_date of this DataUploads.  # noqa: E501
        :type: datetime
        """
        if min_date is None:
            raise ValueError("Invalid value for `min_date`, must not be `None`")  # noqa: E501

        self._min_date = min_date

    @property
    def max_date(self):
        """Gets the max_date of this DataUploads.  # noqa: E501


        :return: The max_date of this DataUploads.  # noqa: E501
        :rtype: datetime
        """
        return self._max_date

    @max_date.setter
    def max_date(self, max_date):
        """Sets the max_date of this DataUploads.


        :param max_date: The max_date of this DataUploads.  # noqa: E501
        :type: datetime
        """
        if max_date is None:
            raise ValueError("Invalid value for `max_date`, must not be `None`")  # noqa: E501

        self._max_date = max_date

    @property
    def metrics(self):
        """Gets the metrics of this DataUploads.  # noqa: E501


        :return: The metrics of this DataUploads.  # noqa: E501
        :rtype: list[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this DataUploads.


        :param metrics: The metrics of this DataUploads.  # noqa: E501
        :type: list[str]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501
        allowed_values = ["temp_alert", "temp_weekly_alert", "dhw", "satellite_temperature", "top_temperature", "bottom_temperature", "sst_anomaly", "significant_wave_height", "wave_mean_period", "wave_peak_period", "wave_mean_direction", "wind_speed", "wind_direction", "cholorophyll_rfu", "cholorophyll_concentration", "conductivity", "water_depth", "odo_saturation", "odo_concentration", "salinity", "specific_conductance", "tds", "turbidity", "total_suspended_solids", "sonde_wiper_position", "ph", "ph_mv", "sonde_battery_voltage", "sonde_cable_power_voltage"]  # noqa: E501
        if not set(metrics).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `metrics` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(metrics) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._metrics = metrics

    @property
    def created_at(self):
        """Gets the created_at of this DataUploads.  # noqa: E501


        :return: The created_at of this DataUploads.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataUploads.


        :param created_at: The created_at of this DataUploads.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DataUploads.  # noqa: E501


        :return: The updated_at of this DataUploads.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataUploads.


        :param updated_at: The updated_at of this DataUploads.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataUploads, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataUploads):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
