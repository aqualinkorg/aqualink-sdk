# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteApplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'permit_requirements': 'str',
        'funding_source': 'str',
        'installation_resources': 'str',
        'tracking_url': 'str',
        'installation_schedule': 'datetime',
        'target_shipdate': 'datetime',
        'uid': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'site': 'Site',
        'user': 'User'
    }

    attribute_map = {
        'id': 'id',
        'permit_requirements': 'permitRequirements',
        'funding_source': 'fundingSource',
        'installation_resources': 'installationResources',
        'tracking_url': 'trackingUrl',
        'installation_schedule': 'installationSchedule',
        'target_shipdate': 'targetShipdate',
        'uid': 'uid',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'site': 'site',
        'user': 'user'
    }

    def __init__(self, id=None, permit_requirements=None, funding_source=None, installation_resources=None, tracking_url=None, installation_schedule=None, target_shipdate=None, uid=None, created_at=None, updated_at=None, site=None, user=None):  # noqa: E501
        """SiteApplication - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._permit_requirements = None
        self._funding_source = None
        self._installation_resources = None
        self._tracking_url = None
        self._installation_schedule = None
        self._target_shipdate = None
        self._uid = None
        self._created_at = None
        self._updated_at = None
        self._site = None
        self._user = None
        self.discriminator = None
        self.id = id
        self.permit_requirements = permit_requirements
        self.funding_source = funding_source
        self.installation_resources = installation_resources
        self.tracking_url = tracking_url
        self.installation_schedule = installation_schedule
        self.target_shipdate = target_shipdate
        self.uid = uid
        self.created_at = created_at
        self.updated_at = updated_at
        self.site = site
        self.user = user

    @property
    def id(self):
        """Gets the id of this SiteApplication.  # noqa: E501


        :return: The id of this SiteApplication.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteApplication.


        :param id: The id of this SiteApplication.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def permit_requirements(self):
        """Gets the permit_requirements of this SiteApplication.  # noqa: E501


        :return: The permit_requirements of this SiteApplication.  # noqa: E501
        :rtype: str
        """
        return self._permit_requirements

    @permit_requirements.setter
    def permit_requirements(self, permit_requirements):
        """Sets the permit_requirements of this SiteApplication.


        :param permit_requirements: The permit_requirements of this SiteApplication.  # noqa: E501
        :type: str
        """
        if permit_requirements is None:
            raise ValueError("Invalid value for `permit_requirements`, must not be `None`")  # noqa: E501

        self._permit_requirements = permit_requirements

    @property
    def funding_source(self):
        """Gets the funding_source of this SiteApplication.  # noqa: E501


        :return: The funding_source of this SiteApplication.  # noqa: E501
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this SiteApplication.


        :param funding_source: The funding_source of this SiteApplication.  # noqa: E501
        :type: str
        """
        if funding_source is None:
            raise ValueError("Invalid value for `funding_source`, must not be `None`")  # noqa: E501

        self._funding_source = funding_source

    @property
    def installation_resources(self):
        """Gets the installation_resources of this SiteApplication.  # noqa: E501


        :return: The installation_resources of this SiteApplication.  # noqa: E501
        :rtype: str
        """
        return self._installation_resources

    @installation_resources.setter
    def installation_resources(self, installation_resources):
        """Sets the installation_resources of this SiteApplication.


        :param installation_resources: The installation_resources of this SiteApplication.  # noqa: E501
        :type: str
        """
        if installation_resources is None:
            raise ValueError("Invalid value for `installation_resources`, must not be `None`")  # noqa: E501

        self._installation_resources = installation_resources

    @property
    def tracking_url(self):
        """Gets the tracking_url of this SiteApplication.  # noqa: E501


        :return: The tracking_url of this SiteApplication.  # noqa: E501
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this SiteApplication.


        :param tracking_url: The tracking_url of this SiteApplication.  # noqa: E501
        :type: str
        """
        if tracking_url is None:
            raise ValueError("Invalid value for `tracking_url`, must not be `None`")  # noqa: E501

        self._tracking_url = tracking_url

    @property
    def installation_schedule(self):
        """Gets the installation_schedule of this SiteApplication.  # noqa: E501


        :return: The installation_schedule of this SiteApplication.  # noqa: E501
        :rtype: datetime
        """
        return self._installation_schedule

    @installation_schedule.setter
    def installation_schedule(self, installation_schedule):
        """Sets the installation_schedule of this SiteApplication.


        :param installation_schedule: The installation_schedule of this SiteApplication.  # noqa: E501
        :type: datetime
        """
        if installation_schedule is None:
            raise ValueError("Invalid value for `installation_schedule`, must not be `None`")  # noqa: E501

        self._installation_schedule = installation_schedule

    @property
    def target_shipdate(self):
        """Gets the target_shipdate of this SiteApplication.  # noqa: E501


        :return: The target_shipdate of this SiteApplication.  # noqa: E501
        :rtype: datetime
        """
        return self._target_shipdate

    @target_shipdate.setter
    def target_shipdate(self, target_shipdate):
        """Sets the target_shipdate of this SiteApplication.


        :param target_shipdate: The target_shipdate of this SiteApplication.  # noqa: E501
        :type: datetime
        """
        if target_shipdate is None:
            raise ValueError("Invalid value for `target_shipdate`, must not be `None`")  # noqa: E501

        self._target_shipdate = target_shipdate

    @property
    def uid(self):
        """Gets the uid of this SiteApplication.  # noqa: E501


        :return: The uid of this SiteApplication.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SiteApplication.


        :param uid: The uid of this SiteApplication.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def created_at(self):
        """Gets the created_at of this SiteApplication.  # noqa: E501


        :return: The created_at of this SiteApplication.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SiteApplication.


        :param created_at: The created_at of this SiteApplication.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SiteApplication.  # noqa: E501


        :return: The updated_at of this SiteApplication.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SiteApplication.


        :param updated_at: The updated_at of this SiteApplication.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def site(self):
        """Gets the site of this SiteApplication.  # noqa: E501


        :return: The site of this SiteApplication.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this SiteApplication.


        :param site: The site of this SiteApplication.  # noqa: E501
        :type: Site
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def user(self):
        """Gets the user of this SiteApplication.  # noqa: E501


        :return: The user of this SiteApplication.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SiteApplication.


        :param user: The user of this SiteApplication.  # noqa: E501
        :type: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
