# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateSiteApplicationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permit_requirements': 'str',
        'funding_source': 'str',
        'installation_resources': 'str',
        'installation_schedule': 'datetime'
    }

    attribute_map = {
        'permit_requirements': 'permitRequirements',
        'funding_source': 'fundingSource',
        'installation_resources': 'installationResources',
        'installation_schedule': 'installationSchedule'
    }

    def __init__(self, permit_requirements=None, funding_source=None, installation_resources=None, installation_schedule=None):  # noqa: E501
        """UpdateSiteApplicationDto - a model defined in Swagger"""  # noqa: E501
        self._permit_requirements = None
        self._funding_source = None
        self._installation_resources = None
        self._installation_schedule = None
        self.discriminator = None
        self.permit_requirements = permit_requirements
        self.funding_source = funding_source
        self.installation_resources = installation_resources
        if installation_schedule is not None:
            self.installation_schedule = installation_schedule

    @property
    def permit_requirements(self):
        """Gets the permit_requirements of this UpdateSiteApplicationDto.  # noqa: E501


        :return: The permit_requirements of this UpdateSiteApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._permit_requirements

    @permit_requirements.setter
    def permit_requirements(self, permit_requirements):
        """Sets the permit_requirements of this UpdateSiteApplicationDto.


        :param permit_requirements: The permit_requirements of this UpdateSiteApplicationDto.  # noqa: E501
        :type: str
        """
        if permit_requirements is None:
            raise ValueError("Invalid value for `permit_requirements`, must not be `None`")  # noqa: E501

        self._permit_requirements = permit_requirements

    @property
    def funding_source(self):
        """Gets the funding_source of this UpdateSiteApplicationDto.  # noqa: E501


        :return: The funding_source of this UpdateSiteApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this UpdateSiteApplicationDto.


        :param funding_source: The funding_source of this UpdateSiteApplicationDto.  # noqa: E501
        :type: str
        """
        if funding_source is None:
            raise ValueError("Invalid value for `funding_source`, must not be `None`")  # noqa: E501

        self._funding_source = funding_source

    @property
    def installation_resources(self):
        """Gets the installation_resources of this UpdateSiteApplicationDto.  # noqa: E501


        :return: The installation_resources of this UpdateSiteApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._installation_resources

    @installation_resources.setter
    def installation_resources(self, installation_resources):
        """Sets the installation_resources of this UpdateSiteApplicationDto.


        :param installation_resources: The installation_resources of this UpdateSiteApplicationDto.  # noqa: E501
        :type: str
        """
        if installation_resources is None:
            raise ValueError("Invalid value for `installation_resources`, must not be `None`")  # noqa: E501

        self._installation_resources = installation_resources

    @property
    def installation_schedule(self):
        """Gets the installation_schedule of this UpdateSiteApplicationDto.  # noqa: E501


        :return: The installation_schedule of this UpdateSiteApplicationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._installation_schedule

    @installation_schedule.setter
    def installation_schedule(self, installation_schedule):
        """Sets the installation_schedule of this UpdateSiteApplicationDto.


        :param installation_schedule: The installation_schedule of this UpdateSiteApplicationDto.  # noqa: E501
        :type: datetime
        """

        self._installation_schedule = installation_schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSiteApplicationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSiteApplicationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
