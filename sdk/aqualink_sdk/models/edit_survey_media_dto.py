# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EditSurveyMediaDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments': 'str',
        'survey_point_id': 'float',
        'featured': 'bool',
        'hidden': 'bool',
        'observations': 'str'
    }

    attribute_map = {
        'comments': 'comments',
        'survey_point_id': 'surveyPointId',
        'featured': 'featured',
        'hidden': 'hidden',
        'observations': 'observations'
    }

    def __init__(self, comments=None, survey_point_id=None, featured=False, hidden=False, observations=None):  # noqa: E501
        """EditSurveyMediaDto - a model defined in Swagger"""  # noqa: E501
        self._comments = None
        self._survey_point_id = None
        self._featured = None
        self._hidden = None
        self._observations = None
        self.discriminator = None
        if comments is not None:
            self.comments = comments
        if survey_point_id is not None:
            self.survey_point_id = survey_point_id
        self.featured = featured
        self.hidden = hidden
        if observations is not None:
            self.observations = observations

    @property
    def comments(self):
        """Gets the comments of this EditSurveyMediaDto.  # noqa: E501


        :return: The comments of this EditSurveyMediaDto.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EditSurveyMediaDto.


        :param comments: The comments of this EditSurveyMediaDto.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def survey_point_id(self):
        """Gets the survey_point_id of this EditSurveyMediaDto.  # noqa: E501


        :return: The survey_point_id of this EditSurveyMediaDto.  # noqa: E501
        :rtype: float
        """
        return self._survey_point_id

    @survey_point_id.setter
    def survey_point_id(self, survey_point_id):
        """Sets the survey_point_id of this EditSurveyMediaDto.


        :param survey_point_id: The survey_point_id of this EditSurveyMediaDto.  # noqa: E501
        :type: float
        """

        self._survey_point_id = survey_point_id

    @property
    def featured(self):
        """Gets the featured of this EditSurveyMediaDto.  # noqa: E501


        :return: The featured of this EditSurveyMediaDto.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this EditSurveyMediaDto.


        :param featured: The featured of this EditSurveyMediaDto.  # noqa: E501
        :type: bool
        """
        if featured is None:
            raise ValueError("Invalid value for `featured`, must not be `None`")  # noqa: E501

        self._featured = featured

    @property
    def hidden(self):
        """Gets the hidden of this EditSurveyMediaDto.  # noqa: E501


        :return: The hidden of this EditSurveyMediaDto.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this EditSurveyMediaDto.


        :param hidden: The hidden of this EditSurveyMediaDto.  # noqa: E501
        :type: bool
        """
        if hidden is None:
            raise ValueError("Invalid value for `hidden`, must not be `None`")  # noqa: E501

        self._hidden = hidden

    @property
    def observations(self):
        """Gets the observations of this EditSurveyMediaDto.  # noqa: E501


        :return: The observations of this EditSurveyMediaDto.  # noqa: E501
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this EditSurveyMediaDto.


        :param observations: The observations of this EditSurveyMediaDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["anthropogenic", "environmental", "evident-disease", "healthy", "invasive-species", "mortality", "no-data", "possible-disease"]  # noqa: E501
        if observations not in allowed_values:
            raise ValueError(
                "Invalid value for `observations` ({0}), must be one of {1}"  # noqa: E501
                .format(observations, allowed_values)
            )

        self._observations = observations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditSurveyMediaDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditSurveyMediaDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
