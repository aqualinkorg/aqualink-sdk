# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DailyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'min_bottom_temperature': 'float',
        'max_bottom_temperature': 'float',
        'avg_bottom_temperature': 'float',
        'degree_heating_days': 'float',
        'top_temperature': 'float',
        'satellite_temperature': 'float',
        'min_wave_height': 'float',
        'max_wave_height': 'float',
        'avg_wave_height': 'float',
        'wave_mean_direction': 'float',
        'wave_peak_period': 'float',
        'wave_mean_period': 'float',
        'min_wind_speed': 'float',
        'max_wind_speed': 'float',
        'avg_wind_speed': 'float',
        'wind_direction': 'float',
        'daily_alert_level': 'float',
        'weekly_alert_level': 'float',
        '_date': 'datetime',
        'site': 'Site',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'min_bottom_temperature': 'minBottomTemperature',
        'max_bottom_temperature': 'maxBottomTemperature',
        'avg_bottom_temperature': 'avgBottomTemperature',
        'degree_heating_days': 'degreeHeatingDays',
        'top_temperature': 'topTemperature',
        'satellite_temperature': 'satelliteTemperature',
        'min_wave_height': 'minWaveHeight',
        'max_wave_height': 'maxWaveHeight',
        'avg_wave_height': 'avgWaveHeight',
        'wave_mean_direction': 'waveMeanDirection',
        'wave_peak_period': 'wavePeakPeriod',
        'wave_mean_period': 'waveMeanPeriod',
        'min_wind_speed': 'minWindSpeed',
        'max_wind_speed': 'maxWindSpeed',
        'avg_wind_speed': 'avgWindSpeed',
        'wind_direction': 'windDirection',
        'daily_alert_level': 'dailyAlertLevel',
        'weekly_alert_level': 'weeklyAlertLevel',
        '_date': 'date',
        'site': 'site',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, min_bottom_temperature=None, max_bottom_temperature=None, avg_bottom_temperature=None, degree_heating_days=None, top_temperature=None, satellite_temperature=None, min_wave_height=None, max_wave_height=None, avg_wave_height=None, wave_mean_direction=None, wave_peak_period=None, wave_mean_period=None, min_wind_speed=None, max_wind_speed=None, avg_wind_speed=None, wind_direction=None, daily_alert_level=None, weekly_alert_level=None, _date=None, site=None, created_at=None, updated_at=None):  # noqa: E501
        """DailyData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._min_bottom_temperature = None
        self._max_bottom_temperature = None
        self._avg_bottom_temperature = None
        self._degree_heating_days = None
        self._top_temperature = None
        self._satellite_temperature = None
        self._min_wave_height = None
        self._max_wave_height = None
        self._avg_wave_height = None
        self._wave_mean_direction = None
        self._wave_peak_period = None
        self._wave_mean_period = None
        self._min_wind_speed = None
        self._max_wind_speed = None
        self._avg_wind_speed = None
        self._wind_direction = None
        self._daily_alert_level = None
        self._weekly_alert_level = None
        self.__date = None
        self._site = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.min_bottom_temperature = min_bottom_temperature
        self.max_bottom_temperature = max_bottom_temperature
        self.avg_bottom_temperature = avg_bottom_temperature
        self.degree_heating_days = degree_heating_days
        self.top_temperature = top_temperature
        self.satellite_temperature = satellite_temperature
        self.min_wave_height = min_wave_height
        self.max_wave_height = max_wave_height
        self.avg_wave_height = avg_wave_height
        self.wave_mean_direction = wave_mean_direction
        self.wave_peak_period = wave_peak_period
        self.wave_mean_period = wave_mean_period
        self.min_wind_speed = min_wind_speed
        self.max_wind_speed = max_wind_speed
        self.avg_wind_speed = avg_wind_speed
        self.wind_direction = wind_direction
        self.daily_alert_level = daily_alert_level
        self.weekly_alert_level = weekly_alert_level
        self._date = _date
        self.site = site
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this DailyData.  # noqa: E501


        :return: The id of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DailyData.


        :param id: The id of this DailyData.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def min_bottom_temperature(self):
        """Gets the min_bottom_temperature of this DailyData.  # noqa: E501


        :return: The min_bottom_temperature of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._min_bottom_temperature

    @min_bottom_temperature.setter
    def min_bottom_temperature(self, min_bottom_temperature):
        """Sets the min_bottom_temperature of this DailyData.


        :param min_bottom_temperature: The min_bottom_temperature of this DailyData.  # noqa: E501
        :type: float
        """
        if min_bottom_temperature is None:
            raise ValueError("Invalid value for `min_bottom_temperature`, must not be `None`")  # noqa: E501

        self._min_bottom_temperature = min_bottom_temperature

    @property
    def max_bottom_temperature(self):
        """Gets the max_bottom_temperature of this DailyData.  # noqa: E501


        :return: The max_bottom_temperature of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._max_bottom_temperature

    @max_bottom_temperature.setter
    def max_bottom_temperature(self, max_bottom_temperature):
        """Sets the max_bottom_temperature of this DailyData.


        :param max_bottom_temperature: The max_bottom_temperature of this DailyData.  # noqa: E501
        :type: float
        """
        if max_bottom_temperature is None:
            raise ValueError("Invalid value for `max_bottom_temperature`, must not be `None`")  # noqa: E501

        self._max_bottom_temperature = max_bottom_temperature

    @property
    def avg_bottom_temperature(self):
        """Gets the avg_bottom_temperature of this DailyData.  # noqa: E501


        :return: The avg_bottom_temperature of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._avg_bottom_temperature

    @avg_bottom_temperature.setter
    def avg_bottom_temperature(self, avg_bottom_temperature):
        """Sets the avg_bottom_temperature of this DailyData.


        :param avg_bottom_temperature: The avg_bottom_temperature of this DailyData.  # noqa: E501
        :type: float
        """
        if avg_bottom_temperature is None:
            raise ValueError("Invalid value for `avg_bottom_temperature`, must not be `None`")  # noqa: E501

        self._avg_bottom_temperature = avg_bottom_temperature

    @property
    def degree_heating_days(self):
        """Gets the degree_heating_days of this DailyData.  # noqa: E501


        :return: The degree_heating_days of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._degree_heating_days

    @degree_heating_days.setter
    def degree_heating_days(self, degree_heating_days):
        """Sets the degree_heating_days of this DailyData.


        :param degree_heating_days: The degree_heating_days of this DailyData.  # noqa: E501
        :type: float
        """
        if degree_heating_days is None:
            raise ValueError("Invalid value for `degree_heating_days`, must not be `None`")  # noqa: E501

        self._degree_heating_days = degree_heating_days

    @property
    def top_temperature(self):
        """Gets the top_temperature of this DailyData.  # noqa: E501


        :return: The top_temperature of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._top_temperature

    @top_temperature.setter
    def top_temperature(self, top_temperature):
        """Sets the top_temperature of this DailyData.


        :param top_temperature: The top_temperature of this DailyData.  # noqa: E501
        :type: float
        """
        if top_temperature is None:
            raise ValueError("Invalid value for `top_temperature`, must not be `None`")  # noqa: E501

        self._top_temperature = top_temperature

    @property
    def satellite_temperature(self):
        """Gets the satellite_temperature of this DailyData.  # noqa: E501


        :return: The satellite_temperature of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._satellite_temperature

    @satellite_temperature.setter
    def satellite_temperature(self, satellite_temperature):
        """Sets the satellite_temperature of this DailyData.


        :param satellite_temperature: The satellite_temperature of this DailyData.  # noqa: E501
        :type: float
        """
        if satellite_temperature is None:
            raise ValueError("Invalid value for `satellite_temperature`, must not be `None`")  # noqa: E501

        self._satellite_temperature = satellite_temperature

    @property
    def min_wave_height(self):
        """Gets the min_wave_height of this DailyData.  # noqa: E501


        :return: The min_wave_height of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._min_wave_height

    @min_wave_height.setter
    def min_wave_height(self, min_wave_height):
        """Sets the min_wave_height of this DailyData.


        :param min_wave_height: The min_wave_height of this DailyData.  # noqa: E501
        :type: float
        """
        if min_wave_height is None:
            raise ValueError("Invalid value for `min_wave_height`, must not be `None`")  # noqa: E501

        self._min_wave_height = min_wave_height

    @property
    def max_wave_height(self):
        """Gets the max_wave_height of this DailyData.  # noqa: E501


        :return: The max_wave_height of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._max_wave_height

    @max_wave_height.setter
    def max_wave_height(self, max_wave_height):
        """Sets the max_wave_height of this DailyData.


        :param max_wave_height: The max_wave_height of this DailyData.  # noqa: E501
        :type: float
        """
        if max_wave_height is None:
            raise ValueError("Invalid value for `max_wave_height`, must not be `None`")  # noqa: E501

        self._max_wave_height = max_wave_height

    @property
    def avg_wave_height(self):
        """Gets the avg_wave_height of this DailyData.  # noqa: E501


        :return: The avg_wave_height of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._avg_wave_height

    @avg_wave_height.setter
    def avg_wave_height(self, avg_wave_height):
        """Sets the avg_wave_height of this DailyData.


        :param avg_wave_height: The avg_wave_height of this DailyData.  # noqa: E501
        :type: float
        """
        if avg_wave_height is None:
            raise ValueError("Invalid value for `avg_wave_height`, must not be `None`")  # noqa: E501

        self._avg_wave_height = avg_wave_height

    @property
    def wave_mean_direction(self):
        """Gets the wave_mean_direction of this DailyData.  # noqa: E501


        :return: The wave_mean_direction of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._wave_mean_direction

    @wave_mean_direction.setter
    def wave_mean_direction(self, wave_mean_direction):
        """Sets the wave_mean_direction of this DailyData.


        :param wave_mean_direction: The wave_mean_direction of this DailyData.  # noqa: E501
        :type: float
        """
        if wave_mean_direction is None:
            raise ValueError("Invalid value for `wave_mean_direction`, must not be `None`")  # noqa: E501

        self._wave_mean_direction = wave_mean_direction

    @property
    def wave_peak_period(self):
        """Gets the wave_peak_period of this DailyData.  # noqa: E501


        :return: The wave_peak_period of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._wave_peak_period

    @wave_peak_period.setter
    def wave_peak_period(self, wave_peak_period):
        """Sets the wave_peak_period of this DailyData.


        :param wave_peak_period: The wave_peak_period of this DailyData.  # noqa: E501
        :type: float
        """
        if wave_peak_period is None:
            raise ValueError("Invalid value for `wave_peak_period`, must not be `None`")  # noqa: E501

        self._wave_peak_period = wave_peak_period

    @property
    def wave_mean_period(self):
        """Gets the wave_mean_period of this DailyData.  # noqa: E501


        :return: The wave_mean_period of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._wave_mean_period

    @wave_mean_period.setter
    def wave_mean_period(self, wave_mean_period):
        """Sets the wave_mean_period of this DailyData.


        :param wave_mean_period: The wave_mean_period of this DailyData.  # noqa: E501
        :type: float
        """
        if wave_mean_period is None:
            raise ValueError("Invalid value for `wave_mean_period`, must not be `None`")  # noqa: E501

        self._wave_mean_period = wave_mean_period

    @property
    def min_wind_speed(self):
        """Gets the min_wind_speed of this DailyData.  # noqa: E501


        :return: The min_wind_speed of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._min_wind_speed

    @min_wind_speed.setter
    def min_wind_speed(self, min_wind_speed):
        """Sets the min_wind_speed of this DailyData.


        :param min_wind_speed: The min_wind_speed of this DailyData.  # noqa: E501
        :type: float
        """
        if min_wind_speed is None:
            raise ValueError("Invalid value for `min_wind_speed`, must not be `None`")  # noqa: E501

        self._min_wind_speed = min_wind_speed

    @property
    def max_wind_speed(self):
        """Gets the max_wind_speed of this DailyData.  # noqa: E501


        :return: The max_wind_speed of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._max_wind_speed

    @max_wind_speed.setter
    def max_wind_speed(self, max_wind_speed):
        """Sets the max_wind_speed of this DailyData.


        :param max_wind_speed: The max_wind_speed of this DailyData.  # noqa: E501
        :type: float
        """
        if max_wind_speed is None:
            raise ValueError("Invalid value for `max_wind_speed`, must not be `None`")  # noqa: E501

        self._max_wind_speed = max_wind_speed

    @property
    def avg_wind_speed(self):
        """Gets the avg_wind_speed of this DailyData.  # noqa: E501


        :return: The avg_wind_speed of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._avg_wind_speed

    @avg_wind_speed.setter
    def avg_wind_speed(self, avg_wind_speed):
        """Sets the avg_wind_speed of this DailyData.


        :param avg_wind_speed: The avg_wind_speed of this DailyData.  # noqa: E501
        :type: float
        """
        if avg_wind_speed is None:
            raise ValueError("Invalid value for `avg_wind_speed`, must not be `None`")  # noqa: E501

        self._avg_wind_speed = avg_wind_speed

    @property
    def wind_direction(self):
        """Gets the wind_direction of this DailyData.  # noqa: E501


        :return: The wind_direction of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._wind_direction

    @wind_direction.setter
    def wind_direction(self, wind_direction):
        """Sets the wind_direction of this DailyData.


        :param wind_direction: The wind_direction of this DailyData.  # noqa: E501
        :type: float
        """
        if wind_direction is None:
            raise ValueError("Invalid value for `wind_direction`, must not be `None`")  # noqa: E501

        self._wind_direction = wind_direction

    @property
    def daily_alert_level(self):
        """Gets the daily_alert_level of this DailyData.  # noqa: E501


        :return: The daily_alert_level of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._daily_alert_level

    @daily_alert_level.setter
    def daily_alert_level(self, daily_alert_level):
        """Sets the daily_alert_level of this DailyData.


        :param daily_alert_level: The daily_alert_level of this DailyData.  # noqa: E501
        :type: float
        """
        if daily_alert_level is None:
            raise ValueError("Invalid value for `daily_alert_level`, must not be `None`")  # noqa: E501

        self._daily_alert_level = daily_alert_level

    @property
    def weekly_alert_level(self):
        """Gets the weekly_alert_level of this DailyData.  # noqa: E501


        :return: The weekly_alert_level of this DailyData.  # noqa: E501
        :rtype: float
        """
        return self._weekly_alert_level

    @weekly_alert_level.setter
    def weekly_alert_level(self, weekly_alert_level):
        """Sets the weekly_alert_level of this DailyData.


        :param weekly_alert_level: The weekly_alert_level of this DailyData.  # noqa: E501
        :type: float
        """
        if weekly_alert_level is None:
            raise ValueError("Invalid value for `weekly_alert_level`, must not be `None`")  # noqa: E501

        self._weekly_alert_level = weekly_alert_level

    @property
    def _date(self):
        """Gets the _date of this DailyData.  # noqa: E501


        :return: The _date of this DailyData.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DailyData.


        :param _date: The _date of this DailyData.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def site(self):
        """Gets the site of this DailyData.  # noqa: E501


        :return: The site of this DailyData.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this DailyData.


        :param site: The site of this DailyData.  # noqa: E501
        :type: Site
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def created_at(self):
        """Gets the created_at of this DailyData.  # noqa: E501


        :return: The created_at of this DailyData.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DailyData.


        :param created_at: The created_at of this DailyData.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DailyData.  # noqa: E501


        :return: The updated_at of this DailyData.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DailyData.


        :param updated_at: The updated_at of this DailyData.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DailyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DailyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
