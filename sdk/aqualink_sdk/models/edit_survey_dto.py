# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EditSurveyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments': 'str',
        'dive_date': 'datetime',
        'weather_conditions': 'str'
    }

    attribute_map = {
        'comments': 'comments',
        'dive_date': 'diveDate',
        'weather_conditions': 'weatherConditions'
    }

    def __init__(self, comments=None, dive_date=None, weather_conditions=None):  # noqa: E501
        """EditSurveyDto - a model defined in Swagger"""  # noqa: E501
        self._comments = None
        self._dive_date = None
        self._weather_conditions = None
        self.discriminator = None
        if comments is not None:
            self.comments = comments
        if dive_date is not None:
            self.dive_date = dive_date
        if weather_conditions is not None:
            self.weather_conditions = weather_conditions

    @property
    def comments(self):
        """Gets the comments of this EditSurveyDto.  # noqa: E501


        :return: The comments of this EditSurveyDto.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EditSurveyDto.


        :param comments: The comments of this EditSurveyDto.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def dive_date(self):
        """Gets the dive_date of this EditSurveyDto.  # noqa: E501


        :return: The dive_date of this EditSurveyDto.  # noqa: E501
        :rtype: datetime
        """
        return self._dive_date

    @dive_date.setter
    def dive_date(self, dive_date):
        """Sets the dive_date of this EditSurveyDto.


        :param dive_date: The dive_date of this EditSurveyDto.  # noqa: E501
        :type: datetime
        """

        self._dive_date = dive_date

    @property
    def weather_conditions(self):
        """Gets the weather_conditions of this EditSurveyDto.  # noqa: E501


        :return: The weather_conditions of this EditSurveyDto.  # noqa: E501
        :rtype: str
        """
        return self._weather_conditions

    @weather_conditions.setter
    def weather_conditions(self, weather_conditions):
        """Sets the weather_conditions of this EditSurveyDto.


        :param weather_conditions: The weather_conditions of this EditSurveyDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["calm", "waves", "storm", "no-data"]  # noqa: E501
        if weather_conditions not in allowed_values:
            raise ValueError(
                "Invalid value for `weather_conditions` ({0}), must be one of {1}"  # noqa: E501
                .format(weather_conditions, allowed_values)
            )

        self._weather_conditions = weather_conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditSurveyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditSurveyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
