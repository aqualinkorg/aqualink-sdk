# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteSurveyPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'survey_point_label_id': 'float',
        'image_url': 'str',
        'name': 'str',
        'site_id': 'float',
        'polygon': 'RegionPolygon',
        'site': 'Site',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'survey_point_label_id': 'surveyPointLabelId',
        'image_url': 'imageUrl',
        'name': 'name',
        'site_id': 'siteId',
        'polygon': 'polygon',
        'site': 'site',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, survey_point_label_id=None, image_url=None, name=None, site_id=None, polygon=None, site=None, created_at=None, updated_at=None):  # noqa: E501
        """SiteSurveyPoint - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._survey_point_label_id = None
        self._image_url = None
        self._name = None
        self._site_id = None
        self._polygon = None
        self._site = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.survey_point_label_id = survey_point_label_id
        self.image_url = image_url
        self.name = name
        self.site_id = site_id
        self.polygon = polygon
        self.site = site
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this SiteSurveyPoint.  # noqa: E501


        :return: The id of this SiteSurveyPoint.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteSurveyPoint.


        :param id: The id of this SiteSurveyPoint.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def survey_point_label_id(self):
        """Gets the survey_point_label_id of this SiteSurveyPoint.  # noqa: E501


        :return: The survey_point_label_id of this SiteSurveyPoint.  # noqa: E501
        :rtype: float
        """
        return self._survey_point_label_id

    @survey_point_label_id.setter
    def survey_point_label_id(self, survey_point_label_id):
        """Sets the survey_point_label_id of this SiteSurveyPoint.


        :param survey_point_label_id: The survey_point_label_id of this SiteSurveyPoint.  # noqa: E501
        :type: float
        """
        if survey_point_label_id is None:
            raise ValueError("Invalid value for `survey_point_label_id`, must not be `None`")  # noqa: E501

        self._survey_point_label_id = survey_point_label_id

    @property
    def image_url(self):
        """Gets the image_url of this SiteSurveyPoint.  # noqa: E501


        :return: The image_url of this SiteSurveyPoint.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this SiteSurveyPoint.


        :param image_url: The image_url of this SiteSurveyPoint.  # noqa: E501
        :type: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def name(self):
        """Gets the name of this SiteSurveyPoint.  # noqa: E501


        :return: The name of this SiteSurveyPoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteSurveyPoint.


        :param name: The name of this SiteSurveyPoint.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def site_id(self):
        """Gets the site_id of this SiteSurveyPoint.  # noqa: E501


        :return: The site_id of this SiteSurveyPoint.  # noqa: E501
        :rtype: float
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this SiteSurveyPoint.


        :param site_id: The site_id of this SiteSurveyPoint.  # noqa: E501
        :type: float
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def polygon(self):
        """Gets the polygon of this SiteSurveyPoint.  # noqa: E501


        :return: The polygon of this SiteSurveyPoint.  # noqa: E501
        :rtype: RegionPolygon
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this SiteSurveyPoint.


        :param polygon: The polygon of this SiteSurveyPoint.  # noqa: E501
        :type: RegionPolygon
        """
        if polygon is None:
            raise ValueError("Invalid value for `polygon`, must not be `None`")  # noqa: E501

        self._polygon = polygon

    @property
    def site(self):
        """Gets the site of this SiteSurveyPoint.  # noqa: E501


        :return: The site of this SiteSurveyPoint.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this SiteSurveyPoint.


        :param site: The site of this SiteSurveyPoint.  # noqa: E501
        :type: Site
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def created_at(self):
        """Gets the created_at of this SiteSurveyPoint.  # noqa: E501


        :return: The created_at of this SiteSurveyPoint.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SiteSurveyPoint.


        :param created_at: The created_at of this SiteSurveyPoint.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SiteSurveyPoint.  # noqa: E501


        :return: The updated_at of this SiteSurveyPoint.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SiteSurveyPoint.


        :param updated_at: The updated_at of this SiteSurveyPoint.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteSurveyPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteSurveyPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
