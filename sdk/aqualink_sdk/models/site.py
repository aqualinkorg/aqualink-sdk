# coding: utf-8

"""
    Aqualink API documentation

    The Aqualink public API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Site(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'name': 'str',
        'sensor_id': 'str',
        'polygon': 'RegionPolygon',
        'depth': 'float',
        'max_monthly_mean': 'float',
        'timezone': 'str',
        'status': 'str',
        'video_stream': 'str',
        'display': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'region': 'AllOfSiteRegion',
        'stream': 'AllOfSiteStream',
        'admins': 'list[User]',
        'surveys': 'list[Survey]',
        'site_application': 'SiteApplication',
        'historical_monthly_mean': 'list[HistoricalMonthlyMean]',
        'has_hobo': 'bool',
        'live_data': 'list[SofarLiveDataDto]',
        'collection_data': 'CollectionDataDto'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sensor_id': 'sensorId',
        'polygon': 'polygon',
        'depth': 'depth',
        'max_monthly_mean': 'maxMonthlyMean',
        'timezone': 'timezone',
        'status': 'status',
        'video_stream': 'videoStream',
        'display': 'display',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'region': 'region',
        'stream': 'stream',
        'admins': 'admins',
        'surveys': 'surveys',
        'site_application': 'siteApplication',
        'historical_monthly_mean': 'historicalMonthlyMean',
        'has_hobo': 'hasHobo',
        'live_data': 'liveData',
        'collection_data': 'collectionData'
    }

    def __init__(self, id=None, name=None, sensor_id=None, polygon=None, depth=None, max_monthly_mean=None, timezone=None, status=None, video_stream=None, display=None, created_at=None, updated_at=None, region=None, stream=None, admins=None, surveys=None, site_application=None, historical_monthly_mean=None, has_hobo=None, live_data=None, collection_data=None):  # noqa: E501
        """Site - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._sensor_id = None
        self._polygon = None
        self._depth = None
        self._max_monthly_mean = None
        self._timezone = None
        self._status = None
        self._video_stream = None
        self._display = None
        self._created_at = None
        self._updated_at = None
        self._region = None
        self._stream = None
        self._admins = None
        self._surveys = None
        self._site_application = None
        self._historical_monthly_mean = None
        self._has_hobo = None
        self._live_data = None
        self._collection_data = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.sensor_id = sensor_id
        self.polygon = polygon
        self.depth = depth
        self.max_monthly_mean = max_monthly_mean
        self.timezone = timezone
        self.status = status
        self.video_stream = video_stream
        self.display = display
        self.created_at = created_at
        self.updated_at = updated_at
        self.region = region
        self.stream = stream
        self.admins = admins
        self.surveys = surveys
        if site_application is not None:
            self.site_application = site_application
        self.historical_monthly_mean = historical_monthly_mean
        self.has_hobo = has_hobo
        if live_data is not None:
            self.live_data = live_data
        if collection_data is not None:
            self.collection_data = collection_data

    @property
    def id(self):
        """Gets the id of this Site.  # noqa: E501


        :return: The id of this Site.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Site.


        :param id: The id of this Site.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Site.  # noqa: E501


        :return: The name of this Site.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Site.


        :param name: The name of this Site.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sensor_id(self):
        """Gets the sensor_id of this Site.  # noqa: E501


        :return: The sensor_id of this Site.  # noqa: E501
        :rtype: str
        """
        return self._sensor_id

    @sensor_id.setter
    def sensor_id(self, sensor_id):
        """Sets the sensor_id of this Site.


        :param sensor_id: The sensor_id of this Site.  # noqa: E501
        :type: str
        """
        self._sensor_id = sensor_id

    @property
    def polygon(self):
        """Gets the polygon of this Site.  # noqa: E501


        :return: The polygon of this Site.  # noqa: E501
        :rtype: RegionPolygon
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this Site.


        :param polygon: The polygon of this Site.  # noqa: E501
        :type: RegionPolygon
        """
        if polygon is None:
            raise ValueError("Invalid value for `polygon`, must not be `None`")  # noqa: E501

        self._polygon = polygon

    @property
    def depth(self):
        """Gets the depth of this Site.  # noqa: E501


        :return: The depth of this Site.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this Site.


        :param depth: The depth of this Site.  # noqa: E501
        :type: float
        """
        self._depth = depth

    @property
    def max_monthly_mean(self):
        """Gets the max_monthly_mean of this Site.  # noqa: E501


        :return: The max_monthly_mean of this Site.  # noqa: E501
        :rtype: float
        """
        return self._max_monthly_mean

    @max_monthly_mean.setter
    def max_monthly_mean(self, max_monthly_mean):
        """Sets the max_monthly_mean of this Site.


        :param max_monthly_mean: The max_monthly_mean of this Site.  # noqa: E501
        :type: float
        """
        self._max_monthly_mean = max_monthly_mean

    @property
    def timezone(self):
        """Gets the timezone of this Site.  # noqa: E501


        :return: The timezone of this Site.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Site.


        :param timezone: The timezone of this Site.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def status(self):
        """Gets the status of this Site.  # noqa: E501


        :return: The status of this Site.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Site.


        :param status: The status of this Site.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["in_review", "rejected", "approved", "shipped", "deployed", "maintenance", "lost"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def video_stream(self):
        """Gets the video_stream of this Site.  # noqa: E501


        :return: The video_stream of this Site.  # noqa: E501
        :rtype: str
        """
        return self._video_stream

    @video_stream.setter
    def video_stream(self, video_stream):
        """Sets the video_stream of this Site.


        :param video_stream: The video_stream of this Site.  # noqa: E501
        :type: str
        """
        self._video_stream = video_stream

    @property
    def display(self):
        """Gets the display of this Site.  # noqa: E501


        :return: The display of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Site.


        :param display: The display of this Site.  # noqa: E501
        :type: bool
        """
        if display is None:
            raise ValueError("Invalid value for `display`, must not be `None`")  # noqa: E501

        self._display = display

    @property
    def created_at(self):
        """Gets the created_at of this Site.  # noqa: E501


        :return: The created_at of this Site.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Site.


        :param created_at: The created_at of this Site.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Site.  # noqa: E501


        :return: The updated_at of this Site.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Site.


        :param updated_at: The updated_at of this Site.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def region(self):
        """Gets the region of this Site.  # noqa: E501


        :return: The region of this Site.  # noqa: E501
        :rtype: AllOfSiteRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Site.


        :param region: The region of this Site.  # noqa: E501
        :type: AllOfSiteRegion
        """
        self._region = region

    @property
    def stream(self):
        """Gets the stream of this Site.  # noqa: E501


        :return: The stream of this Site.  # noqa: E501
        :rtype: AllOfSiteStream
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this Site.


        :param stream: The stream of this Site.  # noqa: E501
        :type: AllOfSiteStream
        """
        self._stream = stream

    @property
    def admins(self):
        """Gets the admins of this Site.  # noqa: E501


        :return: The admins of this Site.  # noqa: E501
        :rtype: list[User]
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this Site.


        :param admins: The admins of this Site.  # noqa: E501
        :type: list[User]
        """
        if admins is None:
            raise ValueError("Invalid value for `admins`, must not be `None`")  # noqa: E501

        self._admins = admins

    @property
    def surveys(self):
        """Gets the surveys of this Site.  # noqa: E501


        :return: The surveys of this Site.  # noqa: E501
        :rtype: list[Survey]
        """
        return self._surveys

    @surveys.setter
    def surveys(self, surveys):
        """Sets the surveys of this Site.


        :param surveys: The surveys of this Site.  # noqa: E501
        :type: list[Survey]
        """
        self._surveys = surveys

    @property
    def site_application(self):
        """Gets the site_application of this Site.  # noqa: E501


        :return: The site_application of this Site.  # noqa: E501
        :rtype: SiteApplication
        """
        return self._site_application

    @site_application.setter
    def site_application(self, site_application):
        """Sets the site_application of this Site.


        :param site_application: The site_application of this Site.  # noqa: E501
        :type: SiteApplication
        """

        self._site_application = site_application

    @property
    def historical_monthly_mean(self):
        """Gets the historical_monthly_mean of this Site.  # noqa: E501


        :return: The historical_monthly_mean of this Site.  # noqa: E501
        :rtype: list[HistoricalMonthlyMean]
        """
        return self._historical_monthly_mean

    @historical_monthly_mean.setter
    def historical_monthly_mean(self, historical_monthly_mean):
        """Sets the historical_monthly_mean of this Site.


        :param historical_monthly_mean: The historical_monthly_mean of this Site.  # noqa: E501
        :type: list[HistoricalMonthlyMean]
        """
        self._historical_monthly_mean = historical_monthly_mean

    @property
    def has_hobo(self):
        """Gets the has_hobo of this Site.  # noqa: E501


        :return: The has_hobo of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._has_hobo

    @has_hobo.setter
    def has_hobo(self, has_hobo):
        """Sets the has_hobo of this Site.


        :param has_hobo: The has_hobo of this Site.  # noqa: E501
        :type: bool
        """
        if has_hobo is None:
            raise ValueError("Invalid value for `has_hobo`, must not be `None`")  # noqa: E501

        self._has_hobo = has_hobo

    @property
    def live_data(self):
        """Gets the live_data of this Site.  # noqa: E501


        :return: The live_data of this Site.  # noqa: E501
        :rtype: list[SofarLiveDataDto]
        """
        return self._live_data

    @live_data.setter
    def live_data(self, live_data):
        """Sets the live_data of this Site.


        :param live_data: The live_data of this Site.  # noqa: E501
        :type: list[SofarLiveDataDto]
        """

        self._live_data = live_data

    @property
    def collection_data(self):
        """Gets the collection_data of this Site.  # noqa: E501


        :return: The collection_data of this Site.  # noqa: E501
        :rtype: CollectionDataDto
        """
        return self._collection_data

    @collection_data.setter
    def collection_data(self, collection_data):
        """Sets the collection_data of this Site.


        :param collection_data: The collection_data of this Site.  # noqa: E501
        :type: CollectionDataDto
        """

        self._collection_data = collection_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Site, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Site):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
